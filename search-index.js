var searchIndex = JSON.parse('{\
"inanis":{"doc":"","t":[0,0,0,5,0,0,0,0,0,0,0,0,3,11,11,11,5,11,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,18,18,18,18,3,3,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,17,17,17,17,17,17,17,17,0,0,0,5,0,0,0,0,5,5,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,17,17,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,7,5,0,0,0,0,0,0,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,0,5,5,5,0,0,0,0,5,0,7,7,7,7,7,7,5,0,0,5,5,0,0,0,0,5,3,12,11,11,12,12,11,12,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,0,0,5,0,0,0,5,5,5,0,18,18,18,18,3,3,18,18,18,18,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,5,11,11,12,5,5,11,12,11,11,11,11,11,5,5,5,5,5,5,5,5,18,18,18,18,18,18,18,18,18,18,18,18,3,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,3,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,12,12,11,11,12,12,12,12,12,12,11,5,5,5],"n":["cache","engine","evaluation","init","interface","perft","state","utils","allocator","pawns","perft","search","AllocationResult","borrow","borrow_mut","from","get_allocation","into","pawn_hashtable_size","transposition_table_size","try_from","try_into","type_id","PawnHashTable","PawnHashTableEntry","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","get","get_usage","into","into","key","new","new","score","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","PerftHashTable","PerftHashTableEntry","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","get","get_usage","into","into","key_and_depth","leafs_count","new","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ALPHA_SCORE","BETA_SCORE","EXACT_SCORE","INVALID","TranspositionTable","TranspositionTableEntry","TranspositionTableScoreType","add","age_entries","all","best_move","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","depth","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get","get_age","get_best_move","get_flags","get_usage","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","key","ne","new","new","not","partial_cmp","remove","score","set","set_age","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_age","type_id","type_id","type_id","union","CHECKMATE_SCORE","DEADLINE_MULTIPLIER","DRAW_SCORE","INVALID_SCORE","MAX_DEPTH","MAX_MOVES_COUNT","MIN_ALPHA","MIN_BETA","clock","context","history","is_score_near_checkmate","killers","qsearch","search","see","sort_next_move","get_time_for_move","AbortToken","SearchContext","SearchResult","SearchStatistics","abort_token","aborted","beta_cutoffs","board","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_depth","deadline","default","default","depth","forced_depth","from","from","from","from","history_table","inc_time","into","into","into","into","into_iter","killers_table","leafs_count","max_move_time","max_nodes_count","max_ply","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_quiet_moves_stages","moves_to_go","new","new","next","nodes_count","non_perfect_cutoffs","null_move_pruning_accepted","null_move_pruning_attempts","null_move_pruning_rejected","pawn_hashtable","pawn_hashtable_added","pawn_hashtable_collisions","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","pv_line","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","score","search_done","search_time_start","static_null_move_pruning_accepted","static_null_move_pruning_attempts","static_null_move_pruning_rejected","statistics","statistics","time","time","to_bytes","to_owned","to_units","to_utf16chars","to_utf8chars","transposition_table","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tt_added","tt_collisions","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","type_id","type_id","type_id","uci_debug","HistoryTable","add","age_values","borrow","borrow_mut","default","from","get","into","max","table","try_from","try_into","type_id","KillersTable","add","age_moves","borrow","borrow_mut","default","exists","from","into","table","try_from","try_into","type_id","FUTILITY_PRUNING_MARGIN","SCORE_PRUNING_THRESHOLD","run","LATE_MOVE_REDUCTION_MIN_DEPTH","LATE_MOVE_REDUCTION_MIN_MOVE_INDEX","LATE_MOVE_REDUCTION_REDUCTION_BASE","LATE_MOVE_REDUCTION_REDUCTION_STEP","MOVE_ORDERING_BISHOP_PROMOTION","MOVE_ORDERING_CASTLING","MOVE_ORDERING_HASH_MOVE","MOVE_ORDERING_HISTORY_MOVE","MOVE_ORDERING_HISTORY_MOVE_OFFSET","MOVE_ORDERING_KILLER_MOVE","MOVE_ORDERING_KNIGHT_PROMOTION","MOVE_ORDERING_LOSING_CAPTURES_OFFSET","MOVE_ORDERING_QUEEN_PROMOTION","MOVE_ORDERING_ROOK_PROMOTION","MOVE_ORDERING_WINNING_CAPTURES_OFFSET","NULL_MOVE_BIG_R","NULL_MOVE_MIN_DEPTH","NULL_MOVE_MIN_GAME_PHASE","NULL_MOVE_R_CHANGE_DEPTH","NULL_MOVE_SMALL_R","RAZORING_DEPTH_MARGIN_BASE","RAZORING_DEPTH_MARGIN_MULTIPLIER","RAZORING_MAX_DEPTH","RAZORING_MIN_DEPTH","STATIC_NULL_MOVE_PRUNING_DEPTH_MARGIN_BASE","STATIC_NULL_MOVE_PRUNING_DEPTH_MARGIN_MULTIPLIER","STATIC_NULL_MOVE_PRUNING_MAX_DEPTH","STATIC_NULL_MOVE_PRUNING_MIN_DEPTH","run","get","init","INITIAL_MATERIAL","init","material","mobility","parameters","pawns","pst","safety","taper_score","evaluate","get_value","recalculate_incremental_values","evaluate","CHAINED_PAWN_ENDING","CHAINED_PAWN_OPENING","DOUBLED_PAWN_ENDING","DOUBLED_PAWN_OPENING","ISOLATED_PAWN_ENDING","ISOLATED_PAWN_OPENING","KING_ATTACKED_FIELDS_ENDING","KING_ATTACKED_FIELDS_OPENING","MOBILITY_CENTER_MULTIPLIER","MOBILITY_ENDING","MOBILITY_OPENING","PASSING_PAWN_ENDING","PASSING_PAWN_OPENING","PAWN_SHIELD_ENDING","PAWN_SHIELD_OPENING","PAWN_SHIELD_OPEN_FILE_ENDING","PAWN_SHIELD_OPEN_FILE_OPENING","PIECE_VALUE","evaluate","evaluate_without_cache","bishop","evaluate","get_value","init","king","knight","pawn","queen","recalculate_incremental_values","rook","PATTERN","PATTERN","PATTERN","PATTERN","PATTERN","PATTERN","evaluate","terminal","uci","run","run","context","divided","fast","normal","run_internal","PerftContext","board","borrow","borrow_mut","check_integrity","fast","from","hashtable","into","new","try_from","try_into","type_id","run","run","run","BISHOP","BLACK","BLACK_FIELDS","CENTER","EDGE","ENDING","FILE_A","FILE_B","FILE_C","FILE_D","FILE_E","FILE_F","FILE_G","FILE_H","KING","KNIGHT","LEFT","OPENING","OUTSIDE","PAWN","QUEEN","RANK_A","RANK_B","RANK_C","RANK_D","RANK_E","RANK_F","RANK_G","RANK_H","RIGHT","ROOK","WHITE","WHITE_FIELDS","bit_count","bit_scan","board","fen","get_lsb","movegen","movescan","patterns","piece_to_symbol","pop_lsb","symbol_to_piece","zobrist","ALL","BLACK_CASTLING","BLACK_LONG_CASTLING","BLACK_SHORT_CASTLING","Bitboard","CastlingRights","NONE","WHITE_CASTLING","WHITE_LONG_CASTLING","WHITE_SHORT_CASTLING","active_color","add_piece","all","are_fields_attacked","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","captured_pieces_stack","castling_rights","castling_rights_stack","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","en_passant","en_passant_stack","eq","evaluate","evaluate_lazy","evaluate_without_cache","extend","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","fullmove_number","get_all_moves","get_attacking_pieces","get_game_phase","get_moves","get_piece","get_piece_color","halfmove_clock","halfmove_clocks_stack","hash","hash","hash_stack","insert","intersection","intersects","into","into","is_all","is_empty","is_field_attacked","is_fifty_move_rule_draw","is_insufficient_material_draw","is_king_checked","is_threefold_repetition_draw","make_move","make_null_move","material_scores","move_piece","ne","new_from_fen","new_from_moves","new_initial_position","not","null_moves","occupancy","partial_cmp","pawn_hash","pawn_hash_stack","piece_table","pieces","pst_scores","recalculate_hash","recalculate_incremental_values","recalculate_pawn_hash","remove","remove_piece","set","sub","sub_assign","symmetric_difference","to_fen","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","undo_move","undo_null_move","union","ParsedEPD","best_move","board","board_to_fen","borrow","borrow_mut","comment","epd_to_board","fen_to_board","from","id","into","new","try_from","try_into","type_id","generate_bishop_number_for_field","generate_rook_number_for_field","get_bishop_moves","get_king_moves","get_knight_moves","get_queen_moves","get_rook_moves","init","BISHOP_PROMOTION","BISHOP_PROMOTION_CAPTURE","CAPTURE","DOUBLE_PUSH","EN_PASSANT","FIELD_CAPTURE","FIELD_PROMOTION","FIELD_SPECIAL_0","FIELD_SPECIAL_1","KNIGHT_PROMOTION","KNIGHT_PROMOTION_CAPTURE","LONG_CASTLING","Move","MoveFlags","QUEEN_PROMOTION","QUEEN_PROMOTION_CAPTURE","QUIET","ROOK_PROMOTION","ROOK_PROMOTION_CAPTURE","SHORT_CASTLING","UNDEFINED1","UNDEFINED2","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","data","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_long_notation","from_short_notation","get_flags","get_from","get_piece_mobility","get_promotion_piece","get_to","hash","insert","intersection","intersects","into","into","is_all","is_capture","is_castling","is_empty","is_en_passant","is_legal","is_promotion","is_quiet","ne","ne","new","not","partial_cmp","remove","scan_pawn_moves","scan_piece_moves","set","sub","sub_assign","symmetric_difference","to_long_notation","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","get_box","get_diagonals","get_file","get_front","get_jumps","get_rail","get_rank","get_star","init","get_active_color_hash","get_castling_right_hash","get_en_passant_hash","get_piece_hash","init","recalculate_hash","recalculate_pawn_hash","benchmark","test","tuner","BenchmarkResult","beta_cutoffs","borrow","borrow_mut","default","from","into","leafs_count","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_quiet_moves_stages","nodes_count","non_perfect_cutoffs","null_move_pruning_accepted","null_move_pruning_attempts","null_move_pruning_rejected","pawn_hashtable_added","pawn_hashtable_collisions","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","run","static_null_move_pruning_accepted","static_null_move_pruning_attempts","static_null_move_pruning_rejected","time","try_from","try_into","tt_added","tt_collisions","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","run","run","validate"],"q":["inanis","","","","","","","","inanis::cache","","","","inanis::cache::allocator","","","","","","","","","","","inanis::cache::pawns","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::cache::perft","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::cache::search","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine","","","","","","","","","","","","","","","","","inanis::engine::clock","inanis::engine::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine::history","","","","","","","","","","","","","","inanis::engine::killers","","","","","","","","","","","","","inanis::engine::qsearch","","","inanis::engine::search","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine::see","","inanis::evaluation","","","","","","","","","inanis::evaluation::material","","","inanis::evaluation::mobility","inanis::evaluation::parameters","","","","","","","","","","","","","","","","","","inanis::evaluation::pawns","","inanis::evaluation::pst","","","","","","","","","","inanis::evaluation::pst::bishop","inanis::evaluation::pst::king","inanis::evaluation::pst::knight","inanis::evaluation::pst::pawn","inanis::evaluation::pst::queen","inanis::evaluation::pst::rook","inanis::evaluation::safety","inanis::interface","","inanis::interface::terminal","inanis::interface::uci","inanis::perft","","","","","inanis::perft::context","","","","","","","","","","","","","inanis::perft::divided","inanis::perft::fast","inanis::perft::normal","inanis::state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::fen","","","","","","","","","","","","","","","","inanis::state::movegen","","","","","","","","inanis::state::movescan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::patterns","","","","","","","","","inanis::state::zobrist","","","","","","","inanis::utils","","","inanis::utils::benchmark","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::utils::test","inanis::utils::tuner",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,2,2,3,2,3,3,3,3,2,3,2,2,2,3,3,2,3,3,3,2,3,2,3,2,3,0,0,4,4,5,4,5,5,5,5,4,5,4,4,4,5,5,5,4,5,5,4,5,4,5,4,5,6,6,6,6,0,0,0,7,7,6,8,6,6,6,6,6,6,6,7,6,8,7,6,8,6,8,6,8,6,6,6,8,8,6,6,6,6,6,6,6,6,6,7,6,8,6,6,6,6,7,8,7,8,7,6,6,6,6,7,6,8,6,6,8,6,7,8,6,6,6,8,6,8,6,6,6,6,8,6,7,6,8,7,6,8,8,7,6,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,9,9,12,10,11,9,12,10,11,11,11,9,9,10,11,12,9,9,12,10,11,9,9,9,12,10,11,9,9,11,9,9,11,11,11,11,9,9,12,9,11,11,11,11,11,9,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,9,9,11,11,11,9,12,9,12,9,11,9,9,9,9,9,12,10,11,9,12,10,11,11,11,11,11,11,11,9,12,10,11,9,0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,0,0,16,16,16,16,17,17,16,17,16,16,16,16,16,16,16,16,17,16,17,17,17,17,16,17,16,17,16,16,16,17,16,16,17,17,16,17,17,17,16,16,16,16,16,16,16,17,16,16,16,16,17,17,17,17,17,17,17,17,17,16,17,17,16,16,16,16,17,16,16,17,17,17,17,17,17,17,17,17,16,17,17,17,16,17,17,16,17,17,17,17,17,17,17,17,16,17,16,16,16,16,17,16,17,16,16,17,16,17,16,17,17,17,16,0,18,18,0,18,18,18,0,0,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,19,20,19,20,19,20,19,19,19,20,20,19,19,19,20,19,19,19,19,19,19,19,20,19,19,19,19,20,20,20,20,0,20,20,19,19,19,19,19,20,19,20,20,19,20,20,20,20,19,20,20,19,19,19,0,0,19,19,19,19,20,19,20,19,19,20,19,20,19,20,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0],"f":[null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["usize",15]],["allocationresult",3]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["u64",15],["i16",15]]],[[]],[[]],[[]],[[]],[[],["pawnhashtableentry",3]],[[]],[[]],[[]],[[]],[[["u64",15],["bool",15]],["option",4,[["pawnhashtableentry",3]]]],[[],["f32",15]],[[]],[[]],null,[[["usize",15]],["pawnhashtable",3]],[[["u16",15],["i16",15]],["pawnhashtableentry",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["u64",15],["u8",15],["u64",15]]],[[]],[[]],[[]],[[]],[[],["perfthashtableentry",3]],[[]],[[]],[[]],[[]],[[["u64",15],["u8",15]],["option",4,[["perfthashtableentry",3]]]],[[],["f32",15]],[[]],[[]],null,null,[[["usize",15]],["perfthashtable",3]],[[["u64",15],["u8",15],["u64",15]],["perfthashtableentry",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["u64",15],["i16",15],["move",3],["i8",15],["u16",15],["transpositiontablescoretype",3]]],[[]],[[]],null,[[]],[[]],[[["transpositiontablescoretype",3]]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transpositiontablescoretype",3]],[[],["transpositiontableentry",3]],[[]],[[]],[[["transpositiontablescoretype",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],null,[[]],[[]],[[["transpositiontablescoretype",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[["u64",15],["u16",15],["bool",15]],["option",4,[["transpositiontableentry",3]]]],[[],["u8",15]],[[["u64",15]],["option",4,[["move",3]]]],[[],["transpositiontablescoretype",3]],[[],["f32",15]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["transpositiontablescoretype",3]],["bool",15]],[[["usize",15]],["transpositiontable",3]],[[["u16",15],["i16",15],["move",3],["i8",15],["transpositiontablescoretype",3]],["transpositiontableentry",3]],[[]],[[["transpositiontablescoretype",3]],["option",4,[["ordering",4]]]],[[]],null,[[["bool",15]]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["i16",15]],["bool",15]],null,null,null,null,[[["usize",15],["usize",15]],["move",3]],[[["u16",15],["u32",15],["u32",15],["u32",15]],["u32",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["searchstatistics",3]],[[]],null,null,[[],["aborttoken",3]],[[],["searchstatistics",3]],null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["bitboard",3],["u32",15],["u32",15],["i8",15],["u64",15],["u32",15],["u32",15],["bool",15],["transpositiontable",3],["pawnhashtable",3],["killerstable",3],["historytable",3],["aborttoken",3]],["searchcontext",3]],[[["u64",15],["i8",15],["i16",15],["vec",3,[["move",3]]],["searchstatistics",3]],["searchresult",3]],[[],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["utf8charsplitter",3]],[[]],[[],["utf16charsplitter",3]],[[],["utf16charmerger",3]],[[],["utf8charmerger",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["u8",15],["u8",15],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[["u8",15],["u8",15],["u8",15]],["u8",15]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["u16",15],["move",3]]],[[]],[[]],[[]],[[]],[[["u16",15],["move",3]],["bool",15]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["searchcontext",3],["i8",15],["u16",15],["i16",15],["i16",15]],["i16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["searchcontext",3],["i8",15],["u16",15],["i16",15],["i16",15],["bool",15],["bool",15]],["i16",15]],[[["u8",15],["u8",15],["u8",15],["u8",15]],["i16",15]],[[]],null,[[]],null,null,null,null,null,null,[[["f32",15],["i16",15],["i16",15]],["i16",15]],[[["bitboard",3]],["i16",15]],[[["u8",15]],["i16",15]],[[["bitboard",3]]],[[["bitboard",3],["u32",15],["u32",15]],["i16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bitboard",3],["pawnhashtable",3],["searchstatistics",3]],["i16",15]],[[["bitboard",3]],["i16",15]],null,[[["bitboard",3]],["i16",15]],[[["u8",15],["u8",15],["u8",15],["u8",15]],["i16",15]],[[]],null,null,null,null,[[["bitboard",3]]],null,null,null,null,null,null,null,[[["bitboard",3],["u32",15],["u32",15]],["i16",15]],null,null,[[]],[[]],null,null,null,null,[[["perftcontext",3],["i32",15]],["u64",15]],null,null,[[]],[[]],null,null,[[]],null,[[]],[[["bitboard",3],["arc",3],["bool",15],["bool",15]],["perftcontext",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["i32",15],["bitboard",3]],["vec",3]],[[["i32",15],["bitboard",3],["usize",15],["usize",15]]],[[["i32",15],["bitboard",3],["bool",15]],["u64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["u8",15]],[[["u64",15]],["u8",15]],null,null,[[["u64",15]],["u64",15]],null,null,null,[[["u8",15]],["result",4,[["char",15],["str",15]]]],[[["u64",15]],["u64",15]],[[["char",15]],["result",4,[["u8",15],["str",15]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",15],["u8",15],["u8",15]]],[[]],[[["u8",15]],["bool",15]],[[]],[[]],[[["castlingrights",3]]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["castlingrights",3]],[[],["bitboard",3]],[[]],[[]],[[["castlingrights",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],null,null,[[["castlingrights",3]],["bool",15]],[[["pawnhashtable",3],["searchstatistics",3]],["i16",15]],[[],["i16",15]],[[],["i16",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],null,[[["u64",15]],["usize",15]],[[["u8",15],["u8",15]],["u8",15]],[[],["f32",15]],[[["usize",15],["u64",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],null,null,[[]],null,null,[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["u8",15],["u8",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u8",15]],["bool",15]],[[],["bool",15]],[[["move",3]]],[[]],null,[[["u8",15],["u8",15],["u8",15],["u8",15]]],[[["castlingrights",3]],["bool",15]],[[["str",15]],["result",4,[["bitboard",3],["str",15]]]],[[],["result",4,[["bitboard",3],["str",15]]]],[[],["bitboard",3]],[[]],null,null,[[["castlingrights",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["u8",15],["u8",15],["u8",15]]],[[["bool",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["move",3]]],[[]],[[]],null,null,null,[[["bitboard",3]],["string",3]],[[]],[[]],null,[[["str",15]],["result",4,[["parsedepd",3],["str",15]]]],[[["str",15]],["result",4,[["bitboard",3],["str",15]]]],[[]],null,[[]],[[["bitboard",3]],["parsedepd",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["moveflags",3]]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["moveflags",3]],[[],["move",3]],[[]],[[]],[[["moveflags",3]],["ordering",4]],[[]],[[],["bool",15]],null,[[]],[[]],[[]],[[["moveflags",3]],["bool",15]],[[["move",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[["str",15],["bitboard",3]],["result",4,[["move",3],["str",15]]]],[[["str",15],["bitboard",3]],["result",4,[["move",3],["str",15]]]],[[],["moveflags",3]],[[],["u8",15]],[[["bitboard",3],["u8",15],["u32",15]],["i16",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bitboard",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["moveflags",3]],["bool",15]],[[["move",3]],["bool",15]],[[["u8",15],["u8",15],["moveflags",3]],["move",3]],[[]],[[["moveflags",3]],["option",4,[["ordering",4]]]],[[]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bool",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[]],[[],["u64",15]],[[["castlingrights",3],["castlingrights",3]],["u64",15]],[[["u8",15]],["u64",15]],[[["u8",15],["u8",15],["u8",15]],["u64",15]],[[]],[[["bitboard",3]]],[[["bitboard",3]]],null,null,null,null,null,[[]],[[]],[[],["benchmarkresult",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["benchmarkresult",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],[[["str",15],["i8",15],["i8",15]]],[[["str",15],["str",15],["bool",15],["bool",15],["usize",15]]],[[],["bool",15]]],"p":[[3,"AllocationResult"],[3,"PawnHashTable"],[3,"PawnHashTableEntry"],[3,"PerftHashTable"],[3,"PerftHashTableEntry"],[3,"TranspositionTableScoreType"],[3,"TranspositionTable"],[3,"TranspositionTableEntry"],[3,"SearchContext"],[3,"AbortToken"],[3,"SearchStatistics"],[3,"SearchResult"],[3,"HistoryTable"],[3,"KillersTable"],[3,"PerftContext"],[3,"CastlingRights"],[3,"Bitboard"],[3,"ParsedEPD"],[3,"MoveFlags"],[3,"Move"],[3,"BenchmarkResult"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};