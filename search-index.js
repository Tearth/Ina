var searchIndex = new Map(JSON.parse('[\
["inanis",{"doc":"The main page of the Inanis documentation. Feel free to â€¦","t":"CCCCCCCCCCCCCCCCFSNNNHNNOONNNSFFFNNNNNNNNNNNNNONNNNNNNNNNONNNONNNNNNNNNNNOSFFFNNNNNNNNNNNNONNNNNNNNNNONNNONNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNOONNOOOONONNNNNNNNNNNSFFFFNNNNNNNNNNNNNONNONNNNNNNNNNNOONNONNNNNNNNNNNNNNSFFFFCNOONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNOONNONONNNNNNNNNNONNNNSSSSSSSSSSSSSSCCHCCCCHCHFFFFOOONNNNNNNNNNOOOOOONNNNOOOOONNNNNOOOOOOOOONNNNNOOOOOOOOOOOOOOOOONOONNNNNNNNNNNNOFNNNNNNOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNHHHHPPPPSSSSSSSSSSSSSGPPPPHHNNNNHHHNHHHHHHHHHHHNNNFNNNNONNNNNNONNNFNONNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNOOOOONFFNNOONNNNNOONNNOOONNNNNNNNNONNOOOOCCOOOONOCOOOOOOCOOCOONCNNNNNNNNNNHHFFONNNNHNNHONNOOOONNNNNNFNNOOHHHNHNOOOONNNCHCCCCHCHHCCSSSSSSHHHHHHHHHHHHSFFSOONNNNNNONOHHNNHHHHHHHHHONNOOONNOOOOHHNONNNNONNOCCCCHFFONNNNOOOONOONNONNNOONNNNNNHHFNNNNNOHONNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSCCCCCCJJFFJJNNNOONNNNNNNNNNNNNNNNNNNNNNNOONOONNNNNNFCNNNNONNNNNNNNHNNNNNNNNNNNNNNHHHHHNNNNNNSSSSSSSSSSSSSSSSSSSSFNNONOONONNNNNNNNNOOONNNNNNNNONNNFFCONNNNNNOOOONNNNOONNNONNNOONNNNNNNNOOOONNNNNNNONNONNNNNNOOOOOOONONNNNOONNNNNNNNNNNNNOSSSSSSSSCCCHHFHOOHHNNHOHHHHHHHHHNHHHONNHNNNFFNNNNOOONNNNNOONNNNOOONNNNNNOFONNONONNNNNNOHHNNNPPFGPNNNNONNNNHNNONCNNNNNNOCCSSSSSSSJSSSSSSSSSSSSSSSSSSSSSSSSSSSSIFFSSSSSSSSSSSSSSSSSHHJHHINNNNNNNNSNNNNJIIIIIIIIINNOOOOOOOHHHHHHHHHNNSNNNNNNIIIIIIIIIIIHHHHCFONNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHOOOONNOOOOONCCQCCQCKRQMKRMQMMMKRQMKMMQFSNNNHHHHNHNQHHONNNHHHHH","n":["cache","engine","evaluation","interface","perft","state","tablebases","testing","tuning","utils","allocator","history","killers","pawns","perft","search","AllocationResult","PAWN_HASHTABLE_SIZE_FRACTION","borrow","borrow_mut","from","get_allocation","into","new","pawn_hashtable_size","transposition_table_size","try_from","try_into","type_id","AGING_DIVISOR","HistoryTable","HistoryTableEntry","HistoryTableResult","add","age_value","age_values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","default","from","from","from","get","get_data","into","into","into","max","new","new_const","set_data","table","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","KILLER_SLOTS","KillersTable","KillersTableEntry","KillersTableResult","add","age_moves","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","default","from","from","from","get","get_data","into","into","into","move","new","new_const","set_data","table","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PawnHashTable","PawnHashTableEntry","PawnHashTableResult","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","from","from","from","get","get_data","get_index","get_key","get_usage","into","into","into","key","key","new","new","score_ending","score_ending","score_opening","score_opening","set_data","table","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BUCKET_SLOTS","PerftHashTable","PerftHashTableBucket","PerftHashTableEntry","PerftHashTableResult","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","default","entries","from","from","from","from","get","get_index","get_usage","into","into","into","into","key","leafs_count","new","new","table","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BUCKET_SLOTS","TranspositionTable","TranspositionTableBucket","TranspositionTableEntry","TranspositionTableResult","TranspositionTableScoreType","add","age","best_move","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","depth","entries","from","from","from","from","get","get_best_move","get_data","get_index","get_key","get_pv_line","get_usage","into","into","into","into","key","key_data","new","new","score","set_data","table","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","EXACT_SCORE","INVALID","LOWER_BOUND","UPPER_BOUND","CHECKMATE_SCORE","DEADLINE_MULTIPLIER","DRAW_SCORE","INVALID_SCORE","MAX_DEPTH","MAX_MOVES_COUNT","MIN_ALPHA","MIN_BETA","TBMATE_SCORE","TIME_THRESHOLD_RATIO","clock","context","is_score_near_checkmate","parameters","qsearch","search","see","sort_next_move","statistics","get_time_for_move","HelperThreadContext","SearchContext","SearchResult","SearchResultLine","abort_flag","board","board","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","context","current_depth","deadline","depth","diagnostic_mode","forced_depth","from","from","from","from","helper_contexts","helper_thread","history_table","history_table","inc_time","into","into","into","into","into_iter","killers_table","killers_table","lines","max_move_time","max_nodes_count","moves_to_go","moves_to_search","multipv","multipv_lines","new","new","new","new","next","parameters","pawn_hashtable","pawn_hashtable","ponder_flag","ponder_mode","pv_line","score","search_done","search_id","search_time_start","statistics","statistics","syzygy_enabled","syzygy_probe_depth","syzygy_probe_limit","time","time","to_owned","transposition_table","transposition_table_usage","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uci_debug","SearchParameters","borrow","borrow_mut","clone","clone_into","default","from","iir_max_reduction","iir_min_depth","iir_reduction_base","iir_reduction_step","into","lmp_max_depth","lmp_max_score","lmp_min_depth","lmp_move_index_margin_base","lmp_move_index_margin_multiplier","lmr_max_reduction","lmr_max_score","lmr_min_depth","lmr_min_move_index","lmr_pv_max_reduction","lmr_pv_min_move_index","lmr_pv_reduction_base","lmr_pv_reduction_step","lmr_reduction_base","lmr_reduction_step","nmp_depth_base","nmp_depth_divider","nmp_margin","nmp_min_depth","nmp_min_game_phase","q_futility_pruning_margin","q_score_pruning_treshold","razoring_depth_margin_base","razoring_depth_margin_multiplier","razoring_max_depth","razoring_min_depth","snmp_depth_margin_base","snmp_depth_margin_multiplier","snmp_max_depth","snmp_min_depth","to_owned","try_from","try_into","type_id","assign_move_scores","futility_pruning_can_be_applied","run","score_pruning_can_be_applied","AllGenerated","Captures","HashMove","KillerMoves","LAZY_SMP_NOISE","MOVE_ORDERING_BISHOP_PROMOTION","MOVE_ORDERING_CASTLING","MOVE_ORDERING_HASH_MOVE","MOVE_ORDERING_HISTORY_MOVE","MOVE_ORDERING_HISTORY_MOVE_OFFSET","MOVE_ORDERING_KILLER_MOVE_1","MOVE_ORDERING_KILLER_MOVE_2","MOVE_ORDERING_KNIGHT_PROMOTION","MOVE_ORDERING_LOSING_CAPTURES_OFFSET","MOVE_ORDERING_QUEEN_PROMOTION","MOVE_ORDERING_ROOK_PROMOTION","MOVE_ORDERING_WINNING_CAPTURES_OFFSET","MoveGeneratorStage","ReadyToCheckHashMove","ReadyToGenerateCaptures","ReadyToGenerateKillerMoves","ReadyToGenerateQuietMoves","assign_capture_scores","assign_quiet_scores","borrow","borrow_mut","eq","from","get_next_move","iir_can_be_applied","iir_get_r","into","lmp_can_be_applied","lmr_can_be_applied","lmr_get_r","nmp_can_be_applied","nmp_get_r","razoring_can_be_applied","razoring_get_margin","run","run_internal","snmp_can_be_applied","snmp_get_margin","try_from","try_into","type_id","SEEContainer","borrow","borrow_mut","evaluate","evaluate_internal","evaluation_parameters","from","get","get_piece_value","get_see_piece_index","into","new","table","try_from","try_into","type_id","SearchStatistics","add_assign","beta_cutoffs","borrow","borrow_mut","clone","clone_into","default","from","into","killers_table_illegal_moves","killers_table_legal_moves","leafs_count","lmp_accepted","lmp_rejected","max_ply","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_killers_stages","move_generator_quiet_moves_stages","nmp_accepted","nmp_attempts","nmp_rejected","nodes_count","non_perfect_cutoffs","pawn_hashtable_added","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","snmp_accepted","snmp_attempts","snmp_rejected","tb_hits","to_owned","try_from","try_into","tt_added","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","EvaluationParameters","EvaluationResult","add","add","bishop_pair_ending","bishop_pair_opening","borrow","borrow","borrow_mut","borrow_mut","calculate_pst","chained_pawn_ending","chained_pawn_opening","clone","clone_into","default","doubled_pawn_ending","doubled_pawn_opening","ending_score","from","from","get_bishop_pst_pattern","get_king_pst_pattern","get_knight_pst_pattern","get_pawn_pst_pattern","get_pst_value","get_queen_pst_pattern","get_rook_pst_pattern","initial_game_phase","into","into","isolated_pawn_ending","isolated_pawn_opening","king_attacked_squares_ending","king_attacked_squares_opening","material","mobility","mobility_inner_ending","mobility_inner_opening","mobility_outer_ending","mobility_outer_opening","new","opening_score","parameters","passed_pawn_ending","passed_pawn_opening","pawn_shield_ending","pawn_shield_open_file_ending","pawn_shield_open_file_opening","pawn_shield_opening","pawns","piece_phase_value","piece_value","pst","pst","pst_patterns","recalculate","safety","set_default_pst_patterns","sub","taper_score","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","evaluate","recalculate_incremental_values","MobilityData","PieceMobility","bishop_mobility","borrow","borrow","borrow_mut","borrow_mut","evaluate","from","from","get_mobility_data","inner","into","into","knight_mobility","outer","queen_mobility","rook_mobility","try_from","try_from","try_into","try_into","type_id","type_id","PawnsData","borrow","borrow_mut","chained_pawns","doubled_pawns","evaluate","evaluate_color","evaluate_without_cache","from","get_pawns_data","into","isolated_pawns","opened_files","passed_pawns","pawn_shield","try_from","try_into","type_id","bishop","evaluate","king","knight","pawn","queen","recalculate_incremental_values","rook","evaluate","evaluate_color","terminal","uci","AUTHOR","COMPILER","DATE","HASH","REPOSITORY","VERSION","handle_benchmark","handle_dperft","handle_evaluate","handle_help","handle_perft","handle_qperft","handle_quit","handle_uci","handle_unknown_command","handle_wah","prepare_board","run","AUTHOR","UciOption","UciState","VERSION","abort_flag","board","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","debug_mode","default","default","disable_crash_files","enable_crash_files","from","from","handle_debug","handle_go","handle_isready","handle_ponderhit","handle_position","handle_quit","handle_setoption","handle_stop","handle_ucinewgame","history_table","into","into","killers_table","max","min","new","new_wide","options","order","pawn_hashtable","ponder_flag","recreate_state_tables","run","to_owned","transposition_table","try_from","try_from","try_into","try_into","type","type_id","type_id","value","context","divided","fast","normal","run_internal","PerftContext","PerftStatistics","board","borrow","borrow","borrow_mut","borrow_mut","captures","castles","check_integrity","checks","default","en_passants","fast","from","from","hashtable","into","into","new","promotions","statistics","try_from","try_from","try_into","try_into","type_id","type_id","run","run","NormalPerftResult","borrow","borrow_mut","from","into","new","nodes","run","statistics","try_from","try_into","type_id","A1","A1_BB","A2","A2_BB","A3","A3_BB","A4","A4_BB","A5","A5_BB","A6","A6_BB","A7","A7_BB","A8","A8_BB","ALL_COLORS","ALL_FILES","ALL_PHASES","ALL_PIECES","ALL_RANKS","ALL_SQUARES","B1","B1_BB","B2","B2_BB","B3","B3_BB","B4","B4_BB","B5","B5_BB","B6","B6_BB","B7","B7_BB","B8","B8_BB","BISHOP","BLACK","BLACK_SQUARES_BB","C1","C1_BB","C2","C2_BB","C3","C3_BB","C4","C4_BB","C5","C5_BB","C6","C6_BB","C7","C7_BB","C8","C8_BB","CENTER_BB","D1","D1_BB","D2","D2_BB","D3","D3_BB","D4","D4_BB","D5","D5_BB","D6","D6_BB","D7","D7_BB","D8","D8_BB","E1","E1_BB","E2","E2_BB","E3","E3_BB","E4","E4_BB","E5","E5_BB","E6","E6_BB","E7","E7_BB","E8","E8_BB","EDGE_BB","ENDING","F1","F1_BB","F2","F2_BB","F3","F3_BB","F4","F4_BB","F5","F5_BB","F6","F6_BB","F7","F7_BB","F8","F8_BB","FILE_A_BB","FILE_B_BB","FILE_C_BB","FILE_D_BB","FILE_E_BB","FILE_F_BB","FILE_G_BB","FILE_H_BB","G1","G1_BB","G2","G2_BB","G3","G3_BB","G4","G4_BB","G5","G5_BB","G6","G6_BB","G7","G7_BB","G8","G8_BB","H1","H1_BB","H2","H2_BB","H3","H3_BB","H4","H4_BB","H5","H5_BB","H6","H6_BB","H7","H7_BB","H8","H8_BB","KING","KNIGHT","LEFT","OPENING","OUTSIDE_BB","PAWN","QUEEN","RANK_1_BB","RANK_2_BB","RANK_3_BB","RANK_4_BB","RANK_5_BB","RANK_6_BB","RANK_7_BB","RANK_8_BB","RIGHT","ROOK","WHITE","WHITE_SQUARES_BB","movegen","movescan","patterns","representation","text","zobrist","BISHOP_MAGIC_NUMBERS","BISHOP_SHIFTS","MagicContainer","MagicSquare","ROOK_MAGIC_NUMBERS","ROOK_SHIFTS","apply_bishop_magic","apply_magic_for_square","apply_rook_magic","attacks","bishop_squares","borrow","borrow","borrow_mut","borrow_mut","default","from","from","generate_bishop_magic_number","generate_magic_number","generate_rook_magic_number","get_attacks","get_bishop_attacks","get_bishop_mask","get_bishop_moves","get_king_moves","get_knight_moves","get_permutation","get_queen_moves","get_rook_attacks","get_rook_mask","get_rook_moves","into","into","magic","mask","new","rook_squares","shift","try_from","try_from","try_into","try_into","type_id","type_id","Move","MoveFlags","borrow","borrow_mut","clone","clone_into","data","default","eq","fmt","from","from_long_notation","from_short_notation","get_flags","get_from","get_piece_mobility","get_promotion_piece","get_to","into","is_capture","is_castling","is_double_push","is_en_passant","is_legal","is_promotion","is_quiet","is_single_push","new","new_from_raw","new_random","scan_pawn_moves","scan_pawn_moves_diagonal_attacks","scan_pawn_moves_double_push","scan_pawn_moves_single_push","scan_piece_moves","to_long_notation","to_owned","to_string","try_from","try_into","type_id","BISHOP_PROMOTION","BISHOP_PROMOTION_CAPTURE","BIT_CAPTURE","BIT_PROMOTION","BIT_SPECIAL_0","BIT_SPECIAL_1","CAPTURE","DOUBLE_PUSH","EN_PASSANT","KNIGHT_PROMOTION","KNIGHT_PROMOTION_CAPTURE","LONG_CASTLING","QUEEN_PROMOTION","QUEEN_PROMOTION_CAPTURE","ROOK_PROMOTION","ROOK_PROMOTION_CAPTURE","SHORT_CASTLING","SINGLE_PUSH","UNDEFINED1","UNDEFINED2","PatternsContainer","borrow","borrow_mut","box_patterns","default","diagonal_patterns","file_patterns","from","front_patterns","get_box","get_diagonals","get_file","get_front","get_jumps","get_rail","get_rank","get_star","into","jump_patterns","rail_patterns","rank_patterns","regenerate_boxes","regenerate_diagonals","regenerate_files","regenerate_fronts","regenerate_jumps","regenerate_rails","regenerate_ranks","regenerate_stars","star_patterns","try_from","try_into","type_id","Board","BoardState","CastlingRights","active_color","add_piece","are_squares_attacked","borrow","borrow","borrow_mut","borrow_mut","captured_piece","captured_piece","castling_rights","castling_rights","clone","clone","clone_into","clone_into","en_passant","en_passant","evaluate","evaluate_lazy","evaluate_without_cache","evaluation_parameters","fmt","from","from","fullmove_number","game_phase","get_all_moves","get_attacking_pieces","get_instant_move","get_moves","get_piece","get_piece_color","get_pieces_count","get_tablebase_move","halfmove_clock","halfmove_clock","hash","hash","into","into","is_fifty_move_rule_draw","is_insufficient_material_draw","is_king_checked","is_repetition_draw","is_square_attacked","magic","make_move","make_null_move","material_scores","move_piece","new","new","new_from_fen","new_from_moves","new_initial_position","null_moves","occupancy","patterns","pawn_hash","pawn_hash","piece_table","pieces","pop_state","pst_scores","push_state","recalculate_hashes","recalculate_incremental_values","remove_piece","see","state_stack","to_epd","to_fen","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","undo_move","undo_null_move","zobrist","ALL","BLACK_CASTLING","BLACK_LONG_CASTLING","BLACK_SHORT_CASTLING","NONE","WHITE_CASTLING","WHITE_LONG_CASTLING","WHITE_SHORT_CASTLING","fen","moves","pgn","piece_to_symbol","symbol_to_piece","ParsedEPD","active_color_to_fen","best_move","board","board_to_epd","board_to_fen","borrow","borrow_mut","castling_to_fen","comment","en_passant_to_fen","epd_to_board","fen_to_active_color","fen_to_board","fen_to_castling","fen_to_en_passant","fen_to_fullmove_number","fen_to_halfmove_clock","fen_to_pieces","from","fullmove_number_to_fen","get_epd_parameter","halfmove_clock_to_fen","id","into","new","pieces_to_fen","try_from","try_into","type_id","PGNLoader","ParsedPGN","borrow","borrow","borrow_mut","borrow_mut","evaluation_parameters","fen","file_iterator","from","from","into","into","into_iter","magic_container","moves","new","new","next","parse","patterns_container","result","see_container","try_from","try_from","try_into","try_into","type_id","type_id","zobrist_container","ZobristContainer","active_color_hash","borrow","borrow_mut","castling_hashes","default","en_passant_hashes","from","get_active_color_hash","get_castling_right_hash","get_en_passant_hash","get_piece_hash","into","piece_hashes","recalculate_hash","recalculate_pawn_hash","try_from","try_into","type_id","Draw","Loss","WdlDtzResult","WdlResult","Win","borrow","borrow","borrow_mut","borrow_mut","dtz","eq","fmt","from","from","get_tablebase_move","into","into","move","new","syzygy","try_from","try_from","try_into","try_into","type_id","type_id","wdl","bindings","probe","TB_BLESSED_LOSS","TB_CASTLING_K","TB_CASTLING_Q","TB_CASTLING_k","TB_CASTLING_q","TB_CURSED_WIN","TB_DRAW","TB_LARGEST","TB_LOSS","TB_MAX_CAPTURES","TB_MAX_MATE_PLY","TB_MAX_MOVES","TB_MAX_PLY","TB_PROMOTES_BISHOP","TB_PROMOTES_KNIGHT","TB_PROMOTES_NONE","TB_PROMOTES_QUEEN","TB_PROMOTES_ROOK","TB_RESULT_DTZ_MASK","TB_RESULT_DTZ_SHIFT","TB_RESULT_EP_MASK","TB_RESULT_EP_SHIFT","TB_RESULT_FAILED","TB_RESULT_FROM_MASK","TB_RESULT_FROM_SHIFT","TB_RESULT_PROMOTES_MASK","TB_RESULT_PROMOTES_SHIFT","TB_RESULT_TO_MASK","TB_RESULT_TO_SHIFT","TB_RESULT_WDL_MASK","TB_RESULT_WDL_SHIFT","TB_VALUE_DRAW","TB_VALUE_INFINITE","TB_VALUE_MATE","TB_VALUE_PAWN","TB_WIN","TbMove","TbRootMove","TbRootMoves","WCHAR_MAX","WCHAR_MIN","WINT_MAX","WINT_MIN","_CRT_PACKING","_HAS_CXX17","_HAS_CXX20","_HAS_CXX23","_HAS_EXCEPTIONS","_HAS_NODISCARD","_SAL_VERSION","_STL_LANG","_USE_ATTRIBUTES_FOR_SAL","_USE_DECLSPECS_FOR_SAL","_VCRT_COMPILER_PREPROCESSOR","__SAL_H_VERSION","__bool_true_false_are_defined","__report_gsfailure","__security_check_cookie","__security_cookie","__security_init_cookie","__va_start","__vcrt_bool","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","false_","fmt","fmt","from","from","index64","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","move_","moves","pv","pvSize","size","tbRank","tbScore","tb_free","tb_init","tb_init_impl","tb_probe_root","tb_probe_root_dtz","tb_probe_root_impl","tb_probe_root_wdl","tb_probe_wdl","tb_probe_wdl_impl","to_owned","to_owned","true_","try_from","try_from","try_into","try_into","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","va_list","wchar_t","get_max_pieces_count","get_root_wdl_dtz","get_wdl","init","benchmark","BenchmarkResult","beta_cutoffs","borrow","borrow_mut","default","from","into","killers_table_illegal_moves","killers_table_legal_moves","leafs_count","lmp_accepted","lmp_rejected","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_killers_stages","move_generator_quiet_moves_stages","nmp_accepted","nmp_attempts","nmp_rejected","nodes_count","non_perfect_cutoffs","pawn_hashtable_added","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","result_hash","run","snmp_accepted","snmp_attempts","snmp_rejected","time","try_from","try_into","tt_added","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","bitflags","bithelpers","conditional_expression","divceil","minmax","percent","rand","BitFlags","Item","bit_flags","contains","BitHelpers","Item","bit_count","bit_helpers","bit_scan","get_lsb","pop_lsb","DivCeil","Item","div_ceil","div_ceil_stable","MinMax","max","min","min_max","RandState","SEED","borrow","borrow_mut","from","i16","i32","i64","i8","into","isize","new","rand_definition","rand_internal","seed","seed","try_from","try_into","type_id","u16","u32","u64","u8","usize"],"q":[[0,"inanis"],[10,"inanis::cache"],[16,"inanis::cache::allocator"],[29,"inanis::cache::history"],[74,"inanis::cache::killers"],[117,"inanis::cache::pawns"],[164,"inanis::cache::perft"],[216,"inanis::cache::search"],[278,"inanis::cache::search::TranspositionTableScoreType"],[282,"inanis::engine"],[301,"inanis::engine::clock"],[302,"inanis::engine::context"],[386,"inanis::engine::parameters"],[432,"inanis::engine::qsearch"],[436,"inanis::engine::search"],[482,"inanis::engine::see"],[498,"inanis::engine::statistics"],[555,"inanis::evaluation"],[623,"inanis::evaluation::material"],[625,"inanis::evaluation::mobility"],[649,"inanis::evaluation::pawns"],[667,"inanis::evaluation::pst"],[675,"inanis::evaluation::safety"],[677,"inanis::interface"],[679,"inanis::interface::terminal"],[697,"inanis::interface::uci"],[749,"inanis::perft"],[754,"inanis::perft::context"],[782,"inanis::perft::divided"],[783,"inanis::perft::fast"],[784,"inanis::perft::normal"],[796,"inanis::state"],[969,"inanis::state::movegen"],[1014,"inanis::state::movescan"],[1055,"inanis::state::movescan::MoveFlags"],[1075,"inanis::state::patterns"],[1108,"inanis::state::representation"],[1195,"inanis::state::representation::CastlingRights"],[1203,"inanis::state::text"],[1208,"inanis::state::text::fen"],[1238,"inanis::state::text::pgn"],[1268,"inanis::state::zobrist"],[1287,"inanis::tablebases"],[1314,"inanis::tablebases::syzygy"],[1316,"inanis::tablebases::syzygy::bindings"],[1439,"inanis::tablebases::syzygy::probe"],[1443,"inanis::testing"],[1444,"inanis::testing::benchmark"],[1498,"inanis::utils"],[1505,"inanis::utils::bitflags"],[1509,"inanis::utils::bithelpers"],[1516,"inanis::utils::divceil"],[1520,"inanis::utils::minmax"],[1524,"inanis::utils::rand"],[1548,"core::result"],[1549,"core::any"],[1550,"core::option"],[1551,"alloc::vec"],[1552,"core::mem::maybe_uninit"],[1553,"alloc::sync"],[1554,"core::sync::atomic"],[1555,"alloc::string"],[1556,"std::ffi::os_str"],[1557,"std::sync::mutex"],[1558,"alloc::string"],[1559,"core::fmt"],[1560,"std::io::buffered::bufreader"],[1561,"std::io"],[1562,"core::ops::range"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calculates optimal size for the hashtables based on â€¦","Calls <code>U::from(self)</code>.","Constructs a new instance of AllocationResult with stored â€¦","","","","","","","","","","Increases <code>[from][to]</code> history slot value based on <code>depth</code>.","Ages a single value by dividing value by the AGING_DIVISOR.","Ages all values in the history table by dividing them by â€¦","","","","","","","Clones HistoryTable by creating new atomics (with the â€¦","Clones HistoryTableEntry by creating a new atomic (with â€¦","","","","Constructs a default instance of HistoryTable with zeroed â€¦","Constructs a default instance of HistoryTableEntry with â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets <code>[from][to]</code> history slot value, relative to <code>max</code>.","Loads and parses atomic value into a HistoryTableEntry â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new instance of HistoryTableResult with â€¦","Constructs a new instance of HistoryTableEntry with zeroed â€¦","Converts <code>value</code> into an atomic word, and stores it.","","","","","","","","","","","","","","","","","","Adds a new killer <code>r#move</code> at the level specified by <code>ply</code> â€¦","Ages killer table by shifting all ply levels by two â€¦","","","","","","","Clones KillersTableEntry by creating a new atomic (with â€¦","","","","","Constructs a default instance of KillersTableEntry with â€¦","Constructs a default instance of KillersTable with zeroed â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets all killer moves at the level specified by <code>ply</code>.","Loads and parses atomic value into a KillersTableEntry â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new instance of KillersTableResult with â€¦","Constructs a new instance of KillersTableEntry with zeroed â€¦","Converts <code>r#move</code> into an atomic word, and stores it.","","","","","","","","","","","","","","","","Adds a new entry (storing the key, <code>score_opening</code> and â€¦","","","","","","","Clones PawnHashTableEntry by creating a new atomic (with â€¦","","","","Constructs a default instance of PawnHashTableEntry with â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry using <code>hash &amp; (self.table.len() - 1)</code> â€¦","Loads and parses atomic value into a PawnHashTableResult â€¦","Calculates an index for the <code>hash</code>.","Calculates a key for the <code>hash</code> by taking the last 16 bits â€¦","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PawnHashTableResult with â€¦","Constructs a new instance of PawnHashTable by allocating â€¦","","","","","Converts <code>key</code>, <code>score_opening</code> and <code>score_ending</code> into an â€¦","","","","","","","","","","","","","","","","","","Adds a new entry (storing <code>hash</code>, <code>depth</code> and <code>leafs_count</code>) â€¦","","","","","","","","","Clones PerftHashTableEntry by creating a new atomics (with â€¦","","","","","Constructs a default instance of PerftHashTableEntry with â€¦","Constructs a default instance of PerftHashTableBucket with â€¦","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry from the specified <code>depth</code> using â€¦","Calculates an index for the <code>hash</code>.","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PerftHashTable by allocating â€¦","Constructs a new instance of PerftHashTableResult with â€¦","","","","","","","","","","","","","","","","","","","","","","Adds a new entry (storing the key, <code>score</code>, <code>best_move</code>, <code>depth</code>â€¦","","","","","","","","","","","Clones TranspositionTableEntry by creating a new atomics â€¦","","","","Constructs a default instance of TranspositionTableEntry â€¦","Constructs a default instance of TranspositionTableBucket â€¦","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry using <code>hash &amp; (self.table.len() - 1)</code> â€¦","Gets an entryâ€™s best move using â€¦","Loads and parses atomic value into a â€¦","Calculates an index for the <code>hash</code>.","Calculates a key for the <code>hash</code> by taking the last 16 bits â€¦","Retrieves PV line from the transposition table, using <code>board</code>â€¦","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of TranspositionTable by â€¦","Constructs a new instance of TranspositionTableResult with â€¦","","Converts <code>key</code>, <code>score</code>, <code>best_move</code>, <code>depth</code>, <code>r#type</code> and <code>age</code> into â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if <code>score</code> is within mate range (from -CHECKMATE_SCOREâ€¦","","","","","Performs a selection sort on <code>moves</code> and <code>move_scores</code> arrays â€¦","","Calculates a time which should be allocated for the next â€¦","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Constructs a new instance of SearchContext with parameters â€¦","Constructs a new instance of HelperThreadContext with â€¦","Constructs a new instance of SearchResult with stored <code>time</code>â€¦","Constructs a new instance of SearchResultLine with stored â€¦","Performs the next iteration of the search, using data â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assigns scores for <code>moves</code> by filling <code>move_scores</code> array with â€¦","Checks if the futility pruning can be applied for â€¦","Entry point of the quiescence search. The main idea here â€¦","Checks if the score pruning can be applied for <code>move_score</code>. â€¦","","","","","","","","","","","","","","","","","","","","","","","Assigns capture scores for <code>moves</code> by filling <code>move_scores</code> â€¦","Assigns quiet scores for <code>moves</code> by filling <code>move_scores</code> â€¦","","","","Returns the argument unchanged.","Gets a next move to analyze. This function acts as â€¦","The main idea of the internal iterative reduction is that â€¦","Gets the internal iterative depth reduction, called R, â€¦","Calls <code>U::from(self)</code>.","The main idea of the late move pruning is to prune all â€¦","The main idea of the late move reduction is to reduce â€¦","Gets the late move depth reduction, called R, based on â€¦","The main idea of the null move pruning is to prune all â€¦","Gets the null move pruning depth reduction, called R, â€¦","The main idea of the razoring is to detect and prune all â€¦","Gets the razoring margin, based on <code>depth</code>. The further from â€¦","Wrapper for the entry point of the regular search, look at â€¦","Entry point of the regular search, with generic <code>ROOT</code> â€¦","The main idea of the static null move pruning (also called â€¦","Gets the static null move pruning margin, based on <code>depth</code>. â€¦","","","","","","","Evaluates a static exchange evaluation result, based on â€¦","Recursive function called by <code>evaluate</code> to help evaluate a â€¦","","Returns the argument unchanged.","Gets a result of the static exchange evaluation, based on â€¦","Gets a piece value based on <code>piece_index</code> saved in SEE â€¦","Converts <code>piece</code> index to SEE piece index, which supports â€¦","Calls <code>U::from(self)</code>.","Constructs a default instance of SEEContainer with zeroed â€¦","","","","","","Implements <code>+=</code> operator for SearchStatistics by adding all â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates PST table for the specified <code>color</code> and <code>pattern</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Gets a PST value for the specified <code>color</code>, <code>piece</code>, <code>phase</code> and â€¦","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Constructs a new instance of EvaluationResult with stored â€¦","","","","","","","","","","","","","","","Recalculates initial material and PST tables.","","Initializes PST patterns with used by default during â€¦","","Blends <code>opening_score</code> and <code>ending_score</code> with the ratio â€¦","","","","","","","","Evaluates material on the <code>board</code> and returns score from the â€¦","Recalculates incremental counters on the <code>board</code>. This â€¦","","","","","","","","Evaluates mobility and part of the king safety on the <code>board</code>â€¦","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Evaluates structure of pawns on the <code>board</code> and returns â€¦","Evaluates pawn structure on the <code>board</code> for the specified â€¦","Does the same thing as evaluate, but doesnâ€™t use pawn â€¦","Returns the argument unchanged.","Gets all pawn features on <code>board</code> for <code>color</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Evaluates piece-square table value on the <code>board</code> and â€¦","","","","","Recalculates incremental counters on the <code>board</code>. This â€¦","","Evaluates king safety on the <code>board</code> and returns score from â€¦","Evaluates king safety on the <code>board</code> for the specified <code>color</code> â€¦","","","","","","","","","Handles <code>benchmark</code> command by running a fixed-depth search â€¦","Handles <code>dperft [depth]</code>, <code>dperft [depth] fen [fen]</code> and â€¦","Handles <code>evaluate [fen]</code> command by printing evaluation for â€¦","Handles <code>help</code> command by printing all available ones.","Handles <code>perft [depth]</code>, <code>perft [depth] fen [fen]</code> and â€¦","Handles <code>qperft [depth] [threads_count] [hashtable_size_mb]</code>â€¦","Handles <code>quit</code> command by exiting process.","Handles <code>uci</code> command by entering into the UCI (Universal â€¦","Handles unknown command by printing warning message.","Handles <code>wah</code> command by printing WAH.                  ","Creates a new board based on the input with FEN or moves â€¦","Entry point of the terminal interface and command loop.","","","","","","","","","","","","","","Constructs a default instance of UciState with zeroed â€¦","","Disables saving of crash files by reverting a panic hook â€¦","Enables saving of crash files by setting a custom panic â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Handles <code>debug [on/off]</code> command by setting the proper flag.","Handles <code>go [parameters]</code> command by running a new search â€¦","Handles <code>isready</code> command by waiting for the busy flag, and â€¦","Handles <code>ponderhit</code> command by setting abort and ponder â€¦","Handles <code>position ...</code> command with the following variants:","Handles <code>quit</code> command by terminating engine process.","Handles <code>setoption [name] value [value]</code> command by creating â€¦","Handles <code>stop</code> command by setting abort flag, which should â€¦","Handles <code>ucinewgame</code> command by resetting a board state, â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Recreates transposition table, pawn hashtable, killers â€¦","Entry point of the UCI (Universal Chess Interface) and â€¦","","","","","","","","","","","","","","","Internal perft function, common for every mode.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new instance of PerftContext with <code>board</code> as â€¦","","","","","","","","","Entry point of the fixed-<code>depth</code> divided perft, which â€¦","Entry point of the fixed-<code>depth</code> fast perft, which uses both â€¦","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Constructs a new instance of NormalPerftResult with stored â€¦","","Entry point of the fixed-<code>depth</code> simple perft. Use â€¦pplies bishop magic for the square specified by <code>square</code>, â€¦","Applies a magic number for a set of <code>permutations</code>, <code>attacks</code> â€¦","Applies rook magic for the square specified by <code>square</code>, â€¦","","","","","","","Constructs a new instance of MagicContainer with default â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Generates a bishop magic number for the square specified â€¦","Generates a magic number for a set of <code>permutations</code> and â€¦","Generates a rook magic number for the square specified by â€¦","Helper function to get all possible to move squares, â€¦","Gets a bishop attacks for the square specified by <code>square</code>, â€¦","Gets a bishop mask for the square specified by <code>square</code>, â€¦","Gets a bishop moves for the square specified by <code>square</code>, â€¦","Gets a king moves for the square specified by <code>square</code>, â€¦","Gets a knight moves for the square specified by <code>square</code>, â€¦","Gets <code>index</code>-th permutation of the <code>mask</code>.  ","Gets a queen moves for the square specified by <code>square</code>, â€¦","Gets a rook attacks for the square specified by <code>square</code>, â€¦","Gets a rook mask for the square specified by <code>square</code>, â€¦","Gets a rook moves for the square specified by <code>square</code>, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of MagicSquare with zeroed â€¦","","","","","","","","","","","","","","","","Constructs a new instance of Move with zeroed values.","","","Returns the argument unchanged.","Converts long-notated move (e2e4, a1a8) in <code>text</code> into the â€¦","Converts short-notated move (e4, Rc8, Qxb6) in <code>text</code> into â€¦","Gets flags from the internal data.","Gets source square from the internal data.","Gets <code>PIECE</code> mobility (by counting all possible moves at the â€¦","Gets promotion piece based on the flags saved in the â€¦","Gets destination square from the internal data.","Calls <code>U::from(self)</code>.","Checks if the move is a capture (excluding en passant, but â€¦","Checks if the move is a short or long castling.","Checks if the move is a double push.","Checks if the move is en passant.","Checks if the move is legal, using <code>board</code> as the context.","Checks if the move is a promotion (including captures).","Checks if the move is quiet (single or double pushes).","Checks if the move is a single push.","Constructs a new instance of Move with stored <code>from</code>, <code>to</code> and â€¦","Constructs a new instance of Move using raw bits, which â€¦","Constructs a new instance of Move with random values, not â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Generates all possible captures for the pawns toward the â€¦","Generates all possible double pushes for the pawns at the â€¦","Generates all possible single pushes for the pawns at the â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Converts move into the long notation (e2e4, a1a8).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a default instance of PatternsContainer with â€¦","","","Returns the argument unchanged.","","Get a box pattern for the square specified by <code>square</code>.","Gets a diagonal pattern for the square specified by <code>square_</code>â€¦","Gets a file pattern for the square specified by <code>square</code>.","Get a front pattern for the square specified by <code>square</code>, â€¦","Get a jumps pattern for the square specified by <code>square</code>.","Get a rail pattern for the square specified by <code>file</code>.","Gets a rank pattern for the square specified by <code>square</code>.","Get a star pattern for the square specified by <code>square</code>.","Calls <code>U::from(self)</code>.","","","","Generates box patterns for all squares.","Generates diagonal patterns for all squares.","Generates file patterns for all squares.","Generates front patterns for all squares.","Generates jump patterns for all fiellds.","Generates rail patterns for all squares.","Generates rank patterns for all squares.","Generates star patterns for all squares.","","","","","","","","","Adds <code>piece</code> on the <code>square</code> with the specified <code>color</code>, also â€¦","Checks if any of the square specified by <code>squares</code> list is â€¦","","","","","","","","","","","","","","","Runs full evaluation (material, piece-square tables, â€¦","Runs lazy (fast) evaluations, considering only material â€¦","Runs full evaluation (material, piece-square tables, â€¦","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Generates all possible moves (non-captures and captures) â€¦","Gets a list of enemy pieces attacking a square specified â€¦","Checks if thereâ€™s an instant move possible and returns â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Gets piece on the square specified by <code>square</code>.","Gets pieceâ€™s color on the square specified by <code>square</code>. â€¦","Gets pieces count by counting set bits in occupancy.","Checks if thereâ€™s a tablebase move (only Syzygy â€¦","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if thereâ€™s fifty move rule draw at the current â€¦","Checks if thereâ€™s an inssuficient material draw:","Check if the king of the <code>color</code> side is checked.","Checks if thereâ€™s repetition draw with the specified â€¦","Checks if the square specified by <code>square</code> is attacked by â€¦","","Makes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Makes a null move, which is basically a switch of the â€¦","","Moves <code>piece</code> from the square specified by <code>from</code> to the â€¦","Constructs a new instance of Board, using provided â€¦","Constructs a new instance of BoardState with stored â€¦","Constructs a new instance of Board with position specified â€¦","Constructs a new instance of Board with position specified â€¦","Constructs a new instance of Board with initial position, â€¦","","","","","","","","Restores halfmove clock, castling rights, en passant â€¦","","Preserves halfmove clock, castling rights, en passant â€¦","Recalculates boardâ€™s hashes entirely.","Recalculates incremental values (material and piece-square â€¦","Removes <code>piece</code> on the <code>square</code> with the specified <code>color</code>, also â€¦","","","Converts the board`s state into EPD.","Converts the boardâ€™s state into FEN.","","","","","","","","","","Undoes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Undoes a null move, which is basically a switch of the â€¦","","","","","","","","","","","","","Converts <code>piece</code> into the corresponding character (p/P, n/N, â€¦","Converts piece <code>symbol</code> (p/P, n/N, b/B, r/R, q/Q, k/K) into â€¦","","Converts active color from the <code>board</code> into the FEN chunk.","","","Converts Board into the EPD.","Converts Board into the FEN.","","","Converts castling rights from the <code>board</code> into the FEN chunk.","","Converts en passant from the <code>board</code> into the FEN chunk.","Converts <code>epd</code> into the Board, using provided containers. If â€¦","Parses FENâ€™s active color and stores it into the <code>board</code>. â€¦","Converts <code>fen</code> into the Board, using provided containers. If â€¦","Parses FENâ€™s castling rights and stores them into the â€¦","Parses FENâ€™s en passant and stores it into the <code>board</code>. â€¦","Parses FENâ€™s fullmove number and stores it into the <code>board</code>â€¦","Parses FENâ€™s halfmove clock and stores it into the <code>board</code>â€¦","Parses FENâ€™s pieces and stores them into the <code>board</code>. â€¦","Returns the argument unchanged.","Converts fullmove number from the <code>board</code> into the FEN chunk.","Gets a value of the <code>name</code> parameters from the specified <code>epd</code>â€¦","Converts halfmove clock from the <code>board</code> into the FEN chunk.","","Calls <code>U::from(self)</code>.","Constructs a new instance of ParsedEPD with the <code>board</code> and â€¦","Converts pieces from the <code>board</code> into the FEN chunk.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Constructs a new instance of PGNLoader with the specified â€¦","Constructs a new instance of ParsedPGN with stored <code>result</code>, â€¦","Performs the next iteration by parsing the following PGN â€¦","Parses a single <code>pgn</code> and returns Some if it has been done â€¦","","","","","","","","","","","","","","","","Constructs a default instance of ZobristContainer with â€¦","","Returns the argument unchanged.","Gets active color hash.","Gets castling right hash based on the <code>current</code> ones and the â€¦","Gets en passant hash for the <code>file</code>.","Gets <code>piece</code> hash with the <code>color</code> for the square specified by â€¦","Calls <code>U::from(self)</code>.","","Recalculates boardâ€™s hash entirely.","Recalculates boardâ€™s pawn hash entirely.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Checks if thereâ€™s a tablebase move (only Syzygy â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new instance of WdlDtzResult with stored <code>wdl</code>, â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets maximal pieces count supported by loaded Syzygy â€¦","Gets WDL (Win-Draw-Loss), DTZ (Distance To Zeroing) and â€¦","Gets WDL (Win-Draw-Loss) for the position specified in â€¦","Loads Syzygy tablebases stored in <code>syzygy_path</code> location.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs a benchmark by performing a fixed-depth search for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Calls <code>U::from(self)</code>.","Gets a random number within <code>range</code>.","Constructs a new instance of RandState with stored <code>seed</code>.","","","Sets an initial seed for LCG.","","","","","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,2,2,2,2,2,2,2,0,0,0,0,5,5,5,5,9,10,5,9,10,5,9,5,9,9,5,9,5,9,10,5,9,5,9,10,5,10,9,9,5,5,9,5,9,10,5,9,10,5,9,10,10,0,0,0,0,11,11,14,16,11,14,16,11,14,11,14,11,14,14,11,14,16,11,11,14,14,16,11,16,16,14,14,11,14,11,14,16,11,14,16,11,14,16,11,0,0,0,17,20,21,17,20,21,17,20,17,20,17,20,20,21,17,17,20,17,17,17,20,21,17,20,21,21,17,20,21,20,21,20,17,20,17,20,21,17,20,21,17,20,21,17,0,0,0,0,0,24,24,25,27,26,24,25,27,26,25,26,25,26,25,25,26,26,24,25,27,26,24,24,24,24,25,27,26,25,27,24,27,24,25,26,24,25,27,26,24,25,27,26,24,25,27,26,0,0,0,0,0,0,28,32,32,28,30,32,31,28,30,32,31,30,31,30,31,30,31,32,31,28,30,32,31,28,28,30,28,28,28,28,28,30,32,31,32,30,28,32,32,30,28,30,31,28,30,32,31,28,30,32,31,32,28,30,32,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,43,42,43,45,38,42,43,45,38,38,38,43,42,42,45,42,42,42,43,45,38,42,42,42,43,42,42,43,45,38,42,42,43,45,42,42,42,42,42,42,42,43,45,38,42,42,42,43,42,42,38,38,42,42,42,42,45,42,42,42,42,45,38,42,45,42,43,45,38,42,43,45,38,42,43,45,38,42,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,46,0,0,46,46,46,46,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,49,49,48,48,49,48,49,48,48,48,48,48,48,48,48,48,49,49,48,48,48,48,48,48,48,48,48,49,48,48,48,48,48,0,0,48,48,48,48,49,49,0,48,48,48,48,48,48,0,48,48,0,48,48,48,0,48,49,49,48,49,48,49,48,49,48,0,0,0,0,50,50,71,50,71,0,50,71,0,71,50,71,50,71,50,50,50,71,50,71,50,71,0,51,51,51,51,0,0,0,51,0,51,51,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,56,57,56,56,56,57,57,56,0,0,57,56,0,0,0,0,0,0,0,0,0,57,57,56,57,56,56,56,56,57,56,57,57,0,0,56,57,57,56,57,56,56,57,56,56,0,0,0,0,0,0,0,61,61,63,61,63,63,63,61,63,63,63,61,61,63,61,61,63,61,63,61,61,63,61,63,61,63,0,0,0,64,64,64,64,64,64,0,64,64,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,68,65,65,68,65,68,65,65,68,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,68,68,68,68,65,68,65,68,65,68,65,68,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,0,33,33,33,33,72,33,72,33,72,33,72,33,72,33,72,33,72,33,33,33,33,33,33,72,33,33,33,33,33,33,33,33,33,33,33,72,33,72,33,72,33,33,33,33,33,33,33,33,33,33,33,72,33,33,33,33,33,33,33,72,33,33,33,33,33,33,33,33,33,33,33,33,33,72,33,33,72,33,72,33,72,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,0,0,75,75,0,75,0,0,0,0,0,0,0,0,0,75,0,0,0,75,75,75,0,75,75,75,0,0,79,80,79,80,79,80,79,79,80,79,80,79,79,80,79,80,79,79,79,80,79,79,80,79,80,79,80,79,0,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,73,73,73,81,81,0,0,81,82,81,82,81,82,81,81,82,81,0,82,81,82,82,0,82,81,82,81,82,81,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,84,83,84,83,84,83,84,0,83,84,83,84,0,0,0,0,0,0,0,0,0,0,83,84,83,84,83,83,84,83,83,0,0,0,0,0,0,0,0,0,83,84,0,83,84,83,84,83,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,85,85,85,85,85,85,85,85,85,85,85,85,0,0,0,0,0,0,0,0,87,0,87,0,88,88,0,88,88,88,0,89,0,89,0,60,60,0,0,0,92,92,92,0,0,0,0,92,0,92,0,0,0,92,92,92,92,0,0,0,0,0],"f":"``````````````````{ce{}{}}0{cc{}}{bd}2{{bb}d}``{c{{f{e}}}{}{}}0{ch{}}````{{jbbl}n}{{jA`}A`}{jn}888888{jj}{AbAb}{{ce}n{}{}}0`{{}j}{{}Ab}<<<{{jbbl}l}{AbAd}???`{A`Ad}3{{AbA`}n}`{ce{}{}}0>>>>>>===`````{{AfAhAj}n}{Afn}222222{AlAl}{AfAf};;`{{}Al}{{}Af}{cc{}}00{{AfAh}{{An{Aj}}}}{AlB`}999`{AjB`}5{{AlAj}n}`;;{c{{f{e}}}{}{}}00000{ch{}}00```{{BbBdBfBf}n}>>>>>>{BhBh}{BbBb}{{ce}n{}{}}0{{}Bh};;;{{BbBd}{{Bl{Bj}}}}{BhBj}{{BbBd}b}{{BbBd}Ah}{{Bbb}Bn}{ce{}{}}00``{{AhBfBf}Bj}{bBb}````{{BhAhBfBf}n}`33??????>>>`````{{C`BdlBd}n}44444444{CbCb}{CdCd}==`{{}Cb}{{}Cd}`{cc{}}000{{C`Bdl}{{Bl{Cf}}}}{{C`Bd}b}{{C`b}Bn}<<<<``{bC`}{BdCf}`>>{c{{f{e}}}{}{}}0000000{ch{}}000``````{{ChBdBfAjCjAhll}n}``{ce{}{}}0000000{ClCl}{CnCn}{{ce}n{}{}}0{{}Cl}{{}Cn}``>>>>{{ChBdAh}{{Bl{D`}}}}{{ChBd}{{Bl{Aj}}}}{ClD`}{{ChBd}b}{{ChBd}Ah}{{ChDbCj}{{Dd{Aj}}}}{{Chb}Bn}<<<<``{bCh}{{AhBfAjCjll}D`}`{{ClAhBfAjCjll}n}`??{c{{f{e}}}{}{}}0000000`{ch{}}000````````````````{BfDf}````{{{An{{Dh{Aj}}}}{An{{Dh{Bf}}}}bb}{{Dj{AjBf}}}}`{{AhA`A`A`}A`}```````{ce{}{}}0000000{DlDl}{{ce}n{}{}}``````{cc{}}000`````33333`````````{{DbDnlA`A`CjBdA`A`{Dd{Aj}}DfDfDfDfDfDfA`Cj{E`{Ch}}{E`{Bb}}{E`{Af}}{E`{j}}{E`{Eb}}{E`{Eb}}}Ed}{{Db{E`{Bb}}{E`{Af}}{E`{j}}Ed}Ef}{{A`CjBn{Dd{Dl}}Eh}Ej}{{Bf{Dd{Aj}}}Dl}{Ed{{Bl{c}}}{}}`````````````````8``========<<<<``88{DnDn}7{{}Dn}7````:``````````````````````````````:??>{{Ed{An{{Dh{Aj}}}}{An{{Dh{Bf}}}}b}n}{{EdBfBfBf}Df}{{EdAhBfBf}Bf}{{EdBf}Df}``````````````````````{{Ed{An{{Dh{Aj}}}}{An{{Dh{Bf}}}}bbAj}n}{{Ed{An{{Dh{Aj}}}}{An{{Dh{Bf}}}}bbAjAh}n}{ce{}{}}0{{ElEl}Df}?{{EdEl{An{{Dh{Aj}}}}{An{{Dh{Bf}}}}bbbBdAjAhDf}{{Bl{{Dj{AjBf}}}}}}{{EdCjAj}Df}{{EdCj}Cj}4{{EdCjbBfDf}Df}{{EdCjAjbBfDfDf}Df}{{Edb}Cj}{{EdCjBfDfDf}Df}4{{EdCjBfDf}Df}{{EdCj}Bf}{{EdCj}n}{{EdCjAhBfBfDfDf}Bf}32{c{{f{e}}}{}{}}0{ch{}}`>>{{Enbbb}Bf}{{Enbbbb}Bf}`{cc{}}1{{Enb}Bf}{{Enb}b}{ce{}{}}{{{Bl{{E`{F`}}}}}En}`887`{{EhEh}n}`22{EhEh}{{ce}n{}{}}{{}Eh}85``````````````````````````````````````5<<`````;``{{FbFb}Fb}{{FbBf}Fb}``7777{{F`b{An{Bf}}}{{An{Bf}}}}``{F`F`}5{{}F`}```=={F`{{An{{An{Bf}}}}}}000{{F`bbbb}Bf}11`<<``````````{{BfBf}Fb}``````````````{F`n}`08{{Fbll}Bf}?{c{{f{e}}}{}{}}000{ch{}}0{DbFb}{Dbn}```{ce{}{}}000{{DbA`A`}Fb}{cc{}}0{{DbbA`}Fd}`33````777766`33``{{DbBbEh}Fb}{{Dbb}Fb}73{{Dbb}Ff}6````::9`8````7`5{{DbA`}Fb}````````{{}n}{{{Dd{Fh}}}n}01001111{{{Fj{Fh}}}{{f{DbFl}}}}{{{Dd{Fn}}{Dd{Fh}}}n}``````;;;;{G`G`}{{ce}n{}{}}`{{}Gb}`66<<{{{Fj{Fl}}{E`{{Gd{Gb}}}}}n}07{{{E`{{Gd{Gb}}}}}n}18100`{ce{}{}}0```{{A`Fhccc}G`Gf}{{A`c}G`{GfGh}}````3;2`{c{{f{e}}}{}{}}000`{ch{}}0`````{{GjGl}Bd}```5555````{{}Gn}``{cc{}}0`77{{Db{E`{C`}}DfDf}Gj}``555544{{GlDb}{{Dd{{Dj{FlBd}}}}}}{{GlDbbb}{{Dj{BdBn}}}}`::3:{{BdGn}H`}`{{GlDbDf}H`}`998```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{Hbb}n}{{Hb{Fj{Bd}}{Fj{Bd}}Bdl}{{Dd{Bd}}}}1``>>>>{{}Hb}88{{Hbb}Bd}{{Hbl{Fj{Bd}}{Fj{Bd}}}Bd}1{{HbBdb{Dj{HdHd}}}Bd}{{HbBdb}Bd}{{HbbHf}Bd}100{{HbBdBd}Bd}2212{ce{}{}}0``{{}Hh}``{c{{f{e}}}{}{}}000{ch{}}0``33{AjAj}{{ce}n{}{}}`{{}Aj}{{AjAj}Df}{{AjHj}Hl}{cc{}}{{FhDb}{{f{AjFl}}}}0{Ajl}{Ajb}{{DbbA`}Hn}11={AjDf}000{{AjDb}Df}111{{bbl}Aj}{AhAj};{{Db{An{{Dh{Aj}}}}bBd}b}0000{AjFl}{ce{}{}}{cFl{}}{c{{f{e}}}{}{}}0{ch{}}`````````````````````33`{{}Hf}``?`{{Hfb}Bd}00{{Hfbb}Bd}11116```{Hfn}0000000`554````{{Dbbbb}n}{{Dbb{Fj{b}}}Df}9999````{DbDb}{I`I`}{{ce}n{}{}}0``{{DbbBbEh}Bf}{{Dbb}Bf}0`{{DbHj}Hl}{cc{}}0``{{Db{An{{Dh{Aj}}}}Bd}b}{{Dbbb}b}{Db{{Bl{Aj}}}}{{Db{An{{Dh{Aj}}}}bBd}b}{{Dbb}b}0{Dbl}{{DbA`}{{Bl{{Dj{AjBf}}}}}}````{ce{}{}}0{DbDf}0{{Dbb}Df}{{DbGl}Df}{{Dbbb}Df}`{{DbAj}n}{Dbn}`{{Dbbbbb}n}{{{Bl{{E`{F`}}}}{Bl{{E`{Ib}}}}{Bl{{E`{Hf}}}}{Bl{{E`{En}}}}{Bl{{E`{Hb}}}}}Db}{{AhlBdBdBdb}I`}{{Fh{Bl{{E`{F`}}}}{Bl{{E`{Ib}}}}{Bl{{E`{Hf}}}}{Bl{{E`{En}}}}{Bl{{E`{Hb}}}}}{{f{DbFl}}}}{{{Fj{Fh}}{Bl{{E`{F`}}}}{Bl{{E`{Ib}}}}{Bl{{E`{Hf}}}}{Bl{{E`{En}}}}{Bl{{E`{Hb}}}}}{{f{DbFl}}}}3```````5`555{{Dbbbb}n}``{DbFl}0=={cFl{}}{c{{f{e}}}{}{}}000{ch{}}0;:````````````{b{{f{IdFl}}}}{Id{{f{bFl}}}}`5``55{ce{}{}}06`6{{Fh{Bl{{E`{F`}}}}{Bl{{E`{Ib}}}}{Bl{{E`{Hf}}}}{Bl{{E`{En}}}}{Bl{{E`{Hb}}}}}{{f{IfFl}}}}{{DbFh}{{f{nFl}}}};00000{cc{}}9{{Fh{Fj{Fh}}}{{Bl{Fl}}}}:`4{DbIf};998``5555```22555``{{{Il{{Ij{Ih}}}}}In}{{Fl{Bl{Fl}}{Dd{Aj}}}J`}{In{{Bl{c}}}{}}{{InFl}{{f{J`Fl}}}}```====<<```99`{{}Ib}`7{IbBd}{{Ibll}Bd}{{Ibb}Bd}{{Ibbbb}Bd}>`{Dbn}0{c{{f{e}}}{}{}}0{ch{}}`````{ce{}{}}000`{{JbJb}Df}{{JbHj}Hl}{cc{}}0{{DbA`}{{Bl{{Dj{AjBf}}}}}}44`{{JbA`Aj}Jd}`777766`````````````````````````````````````````````````````````````````5555{JfJf}{JhJh}{{ce}n{}{}}0`{{JfHj}Hl}{{JhHj}Hl}77``````````::````````````````::`<<<<;;```````````{{}l}{Db{{Bl{Jd}}}}{Db{{Bl{Jb}}}}{Fhn}```>>{{}Jj}<?``````````````````````````````````0````{c{{f{e}}}{}{}}0`````{ch{}}``````````{{{Jn{}{{Jl{c}}}}c}Df{}}``{{{K`{}{{Jl{c}}}}}b{}}`0{{{K`{}{{Jl{c}}}}}c{}}0```{{{Kb{}{{Jl{c}}}}c}c{}}`{{}Gh}0```{ce{}{}}0{cc{}}{cBf{{Kd{Bf}}}}{cGl{{Kd{Gl}}}}{cKf{{Kd{Kf}}}}{cCj{{Kd{Cj}}}}5{cHd{{Kd{Hd}}}}{BdKh}`{{}Bd}{Bdn}`{c{{f{e}}}{}{}}0{ch{}}{cAh{{Kd{Ah}}}}{cA`{{Kd{A`}}}}{cBd{{Kd{Bd}}}}{cl{{Kd{l}}}}{cb{{Kd{b}}}}","c":[],"p":[[1,"usize"],[5,"AllocationResult",16],[6,"Result",1548],[5,"TypeId",1549],[5,"HistoryTable",29],[1,"u8"],[1,"unit"],[1,"u32"],[5,"HistoryTableEntry",29],[5,"HistoryTableResult",29],[5,"KillersTable",74],[1,"u16"],[5,"Move",1014],[5,"KillersTableEntry",74],[1,"array"],[5,"KillersTableResult",74],[5,"PawnHashTable",117],[1,"u64"],[1,"i16"],[5,"PawnHashTableEntry",117],[5,"PawnHashTableResult",117],[6,"Option",1550],[1,"f32"],[5,"PerftHashTable",164],[5,"PerftHashTableEntry",164],[5,"PerftHashTableBucket",164],[5,"PerftHashTableResult",164],[5,"TranspositionTable",216],[1,"i8"],[5,"TranspositionTableEntry",216],[5,"TranspositionTableBucket",216],[5,"TranspositionTableResult",216],[5,"Board",1108],[5,"Vec",1551],[1,"bool"],[20,"MaybeUninit",1552],[1,"tuple"],[5,"SearchResultLine",302],[5,"SearchParameters",386],[5,"Arc",1553],[5,"AtomicBool",1554],[5,"SearchContext",302],[5,"HelperThreadContext",302],[5,"SearchStatistics",498],[5,"SearchResult",302],[6,"MoveGeneratorStage",436],[5,"SEEContainer",482],[5,"EvaluationParameters",555],[5,"EvaluationResult",555],[5,"MobilityData",625],[5,"PawnsData",649],[1,"str"],[1,"slice"],[5,"String",1555],[5,"OsString",1556],[5,"UciOption",697],[5,"UciState",697],[5,"Mutex",1557],[10,"ToString",1555],[10,"MinMax",1520],[5,"PerftContext",754],[1,"i32"],[5,"PerftStatistics",754],[5,"NormalPerftResult",784],[5,"MagicContainer",969],[1,"isize"],[5,"PatternsContainer",1075],[5,"MagicSquare",969],[5,"Formatter",1558],[8,"Result",1558],[5,"PieceMobility",625],[5,"BoardState",1108],[5,"ZobristContainer",1268],[1,"char"],[5,"ParsedEPD",1208],[5,"File",1559],[5,"BufReader",1560],[5,"Lines",1561],[5,"PGNLoader",1238],[5,"ParsedPGN",1238],[6,"WdlResult",1287],[5,"WdlDtzResult",1287],[5,"TbRootMove",1316],[5,"TbRootMoves",1316],[5,"BenchmarkResult",1444],[17,"Item"],[10,"BitFlags",1505],[10,"BitHelpers",1509],[10,"DivCeil",1516],[10,"RangeBounds",1562],[1,"i64"],[5,"RandState",1524]],"b":[[557,"impl-Add-for-EvaluationResult"],[558,"impl-Add%3Ci16%3E-for-EvaluationResult"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
