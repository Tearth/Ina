var searchIndex = JSON.parse('{\
"inanis":{"doc":"Main page of the Inanis documentation. Feel free to â€¦","t":[0,0,0,5,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,5,11,11,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,18,18,17,18,18,3,3,3,3,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,17,17,17,17,17,17,17,17,0,0,0,5,0,0,0,0,5,5,3,3,3,3,3,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,17,17,5,5,5,5,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,17,17,17,17,17,17,17,17,17,17,13,13,13,17,17,17,17,5,11,11,11,11,11,11,11,5,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,7,5,5,5,5,5,5,7,5,0,0,0,0,0,0,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,7,0,5,5,5,5,0,0,0,0,5,0,7,7,7,7,7,7,5,5,0,0,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,3,17,12,12,11,11,12,12,11,11,11,11,11,5,5,5,5,5,5,5,5,5,12,11,11,12,12,12,12,5,5,12,12,11,11,11,5,0,0,0,0,5,3,12,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,0,0,5,0,0,0,5,5,5,0,18,18,18,18,3,3,18,18,18,18,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,12,12,5,11,11,5,12,11,11,11,5,5,5,5,5,5,5,5,5,11,5,5,5,12,11,11,11,5,11,11,11,7,7,7,3,7,7,7,5,5,5,12,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,12,12,11,12,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,3,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,5,5,5,5,5,5,5,0,0,0,3,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,12,12,11,11,12,12,12,12,12,12,11,3,12,12,11,11,11,11,11,11,12,11,11,5,11,5,11,11,11,3,3,3,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,5,5,12,12,12,12,11,11,11,12,12,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,5,12,5,5],"n":["cache","engine","evaluation","init","interface","perft","state","utils","allocator","pawns","perft","search","AllocationResult","borrow","borrow_mut","deref","deref_mut","drop","from","get_allocation","init","into","pawn_hashtable_size","transposition_table_size","try_from","try_into","type_id","PawnHashTable","PawnHashTableEntry","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get","get_key","get_usage","init","init","into","into","key","new","new","score","table","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BUCKET_SLOTS","PerftHashTable","PerftHashTableBucket","PerftHashTableEntry","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","entries","from","from","from","get","get_usage","init","init","init","into","into","into","key_and_depth","leafs_count","new","new","table","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ALPHA_SCORE","BETA_SCORE","BUCKET_SLOTS","EXACT_SCORE","INVALID","TranspositionTable","TranspositionTableBucket","TranspositionTableEntry","TranspositionTableScoreType","add","age_entries","all","best_move","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","default","default","depth","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","difference","drop","drop","drop","drop","empty","entries","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get","get_age","get_best_move","get_flags","get_key","get_usage","hash","init","init","init","init","insert","intersection","intersects","into","into","into","into","is_all","is_empty","key","ne","new","new","not","partial_cmp","remove","score","set","set_age","sub","sub_assign","symmetric_difference","table","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_age","type_id","type_id","type_id","type_id","union","CHECKMATE_SCORE","DEADLINE_MULTIPLIER","DRAW_SCORE","INVALID_SCORE","MAX_DEPTH","MAX_MOVES_COUNT","MIN_ALPHA","MIN_BETA","clock","context","history","is_score_near_checkmate","killers","qsearch","search","see","sort_next_move","get_time_for_move","HelperThreadContext","SearchContext","SearchResult","SearchStatistics","Token","abort_token","add_assign","beta_cutoffs","board","board","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","context","current_depth","deadline","default","default","depth","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","forced_depth","from","from","from","from","from","get_pv_line","helper_contexts","helper_thread","history_table","history_table","inc_time","init","init","init","init","init","into","into","into","into","into","into_iter","killers_table","killers_table","late_move_pruning_accepted","late_move_pruning_rejected","leafs_count","max_move_time","max_nodes_count","max_ply","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_quiet_moves_stages","moves_to_go","new","new","next","nodes_count","non_perfect_cutoffs","null_move_pruning_accepted","null_move_pruning_attempts","null_move_pruning_rejected","pawn_hashtable","pawn_hashtable","pawn_hashtable_added","pawn_hashtable_collisions","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","ponder_token","pv_line","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","reduction_pruning_accepted","reduction_pruning_rejected","score","search_done","search_time_start","set","static_null_move_pruning_accepted","static_null_move_pruning_attempts","static_null_move_pruning_rejected","statistics","statistics","time","time","to_bytes","to_owned","to_units","to_utf16chars","to_utf8chars","transposition_table","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tt_added","tt_collisions","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","type_id","type_id","type_id","type_id","uci_debug","HistoryTable","add","age_values","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","from","get","init","into","max","table","to_owned","try_from","try_into","type_id","KILLER_SLOTS","KillersTable","add","age_moves","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","exists","from","init","into","table","to_owned","try_from","try_into","type_id","FUTILITY_PRUNING_MARGIN","SCORE_PRUNING_THRESHOLD","assign_move_scores","futility_pruning_can_be_applied","run","score_pruning_can_be_applied","AllGenerated","Captures","LATE_MOVE_PRUNING_MAX_DEPTH","LATE_MOVE_PRUNING_MAX_SCORE","LATE_MOVE_PRUNING_MIN_DEPTH","LATE_MOVE_PRUNING_MOVE_INDEX_MARGIN_BASE","LATE_MOVE_PRUNING_MOVE_INDEX_MARGIN_MULTIPLIER","LATE_MOVE_REDUCTION_MAX_REDUCTION","LATE_MOVE_REDUCTION_MAX_SCORE","LATE_MOVE_REDUCTION_MIN_DEPTH","LATE_MOVE_REDUCTION_MIN_MOVE_INDEX","LATE_MOVE_REDUCTION_REDUCTION_BASE","LATE_MOVE_REDUCTION_REDUCTION_STEP","LAZY_SMP_NOISE","MOVE_ORDERING_BISHOP_PROMOTION","MOVE_ORDERING_CASTLING","MOVE_ORDERING_HASH_MOVE","MOVE_ORDERING_HISTORY_MOVE","MOVE_ORDERING_HISTORY_MOVE_OFFSET","MOVE_ORDERING_KILLER_MOVE","MOVE_ORDERING_KNIGHT_PROMOTION","MOVE_ORDERING_LOSING_CAPTURES_OFFSET","MOVE_ORDERING_QUEEN_PROMOTION","MOVE_ORDERING_ROOK_PROMOTION","MOVE_ORDERING_WINNING_CAPTURES_OFFSET","MoveGeneratorStage","NULL_MOVE_BIG_R","NULL_MOVE_MIN_DEPTH","NULL_MOVE_MIN_GAME_PHASE","NULL_MOVE_R_CHANGE_DEPTH","NULL_MOVE_SMALL_R","RAZORING_DEPTH_MARGIN_BASE","RAZORING_DEPTH_MARGIN_MULTIPLIER","RAZORING_MAX_DEPTH","RAZORING_MIN_DEPTH","REDUCTION_PRUNING_DEPTH_THRESHOLD","ReadyToCheckHashMove","ReadyToGenerateCaptures","ReadyToGenerateQuietMoves","STATIC_NULL_MOVE_PRUNING_DEPTH_MARGIN_BASE","STATIC_NULL_MOVE_PRUNING_DEPTH_MARGIN_MULTIPLIER","STATIC_NULL_MOVE_PRUNING_MAX_DEPTH","STATIC_NULL_MOVE_PRUNING_MIN_DEPTH","assign_move_scores","borrow","borrow_mut","deref","deref_mut","drop","eq","from","get_next_move","init","into","late_move_pruning_can_be_applied","late_move_reduction_can_be_applied","late_move_reduction_get_r","null_move_pruning_can_be_applied","null_move_pruning_get_r","razoring_can_be_applied","razoring_get_margin","reduction_pruning_can_be_applied","run","static_null_move_pruning_can_be_applied","static_null_move_pruning_get_margin","try_from","try_into","type_id","TABLE","evaluate","evaluate_internal","get","get_piece_value","get_see_piece_index","init","INITIAL_MATERIAL","init","material","mobility","parameters","pawns","pst","safety","taper_score","evaluate","recalculate_incremental_values","evaluate","evaluate_color","CHAINED_PAWN_ENDING","CHAINED_PAWN_OPENING","DOUBLED_PAWN_ENDING","DOUBLED_PAWN_OPENING","ISOLATED_PAWN_ENDING","ISOLATED_PAWN_OPENING","KING_ATTACKED_FIELDS_ENDING","KING_ATTACKED_FIELDS_OPENING","MOBILITY_CENTER_MULTIPLIER","MOBILITY_ENDING","MOBILITY_OPENING","PASSING_PAWN_ENDING","PASSING_PAWN_OPENING","PAWN_SHIELD_ENDING","PAWN_SHIELD_OPENING","PAWN_SHIELD_OPEN_FILE_ENDING","PAWN_SHIELD_OPEN_FILE_OPENING","PIECE_VALUE","evaluate","evaluate_color","evaluate_without_cache","TABLE","bishop","calculate_pattern","evaluate","get_value","init","king","knight","pawn","queen","recalculate_incremental_values","rook","PATTERN","PATTERN","PATTERN","PATTERN","PATTERN","PATTERN","evaluate","evaluate_color","terminal","uci","AUTHOR","DATE","HASH","REPOSITORY","VERSION","handle_benchmark","handle_dperft","handle_evaluate","handle_help","handle_magic","handle_perft","handle_qperft","handle_quit","handle_test","handle_tuner","handle_uci","handle_unknown_command","handle_wah","percent","prepare_board","run","AUTHOR","UciState","VERSION","abort_token","board","borrow","borrow_mut","busy_flag","debug_mode","default","deref","deref_mut","drop","from","handle_debug","handle_go","handle_isready","handle_ponderhit","handle_position","handle_quit","handle_setoption","handle_stop","handle_ucinewgame","history_table","init","into","killers_table","options","pawn_hashtable","ponder_token","recreate_state_tables","run","search_thread","transposition_table","try_from","try_into","type_id","wait_for_busy_flag","context","divided","fast","normal","run_internal","PerftContext","board","borrow","borrow_mut","check_integrity","deref","deref_mut","drop","fast","from","hashtable","init","into","new","try_from","try_into","type_id","run","run","run","BISHOP","BLACK","BLACK_FIELDS","CENTER","EDGE","ENDING","FILE_A","FILE_B","FILE_C","FILE_D","FILE_E","FILE_F","FILE_G","FILE_H","KING","KNIGHT","LEFT","OPENING","OUTSIDE","PAWN","QUEEN","RANK_A","RANK_B","RANK_C","RANK_D","RANK_E","RANK_F","RANK_G","RANK_H","RIGHT","ROOK","WHITE","WHITE_FIELDS","bit_count","bit_scan","board","fen","get_lsb","movegen","movescan","patterns","piece_to_symbol","pop_lsb","symbol_to_piece","zobrist","ALL","BLACK_CASTLING","BLACK_LONG_CASTLING","BLACK_SHORT_CASTLING","Bitboard","CastlingRights","NONE","WHITE_CASTLING","WHITE_LONG_CASTLING","WHITE_SHORT_CASTLING","active_color","add_piece","all","are_fields_attacked","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","captured_pieces_stack","castling_rights","castling_rights_stack","clone","clone","clone_into","clone_into","cmp","complement","contains","default","deref","deref","deref_mut","deref_mut","difference","drop","drop","empty","en_passant","en_passant_stack","eq","evaluate","evaluate_lazy","evaluate_without_cache","extend","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","fullmove_number","get_all_moves","get_attacking_pieces","get_game_phase","get_moves","get_piece","get_piece_color","halfmove_clock","halfmove_clocks_stack","hash","hash","hash_stack","init","init","insert","intersection","intersects","into","into","is_all","is_empty","is_field_attacked","is_fifty_move_rule_draw","is_insufficient_material_draw","is_king_checked","is_threefold_repetition_draw","make_move","make_null_move","material_scores","move_piece","ne","new_from_fen","new_from_moves","new_initial_position","not","null_moves","occupancy","partial_cmp","pawn_hash","pawn_hash_stack","piece_table","pieces","pst_scores","recalculate_hash","recalculate_incremental_values","recalculate_pawn_hash","remove","remove_piece","set","sub","sub_assign","symmetric_difference","to_fen","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","undo_move","undo_null_move","union","ParsedEPD","active_color_to_fen","best_move","board","board_to_fen","borrow","borrow_mut","castling_to_fen","comment","deref","deref_mut","drop","en_passant_to_fen","epd_to_board","fen_to_active_color","fen_to_board","fen_to_castling","fen_to_en_passant","fen_to_fullmove_number","fen_to_halfmove_clock","fen_to_pieces","from","fullmove_number_to_fen","get_epd_parameter","halfmove_clock_to_fen","id","init","into","new","pieces_to_fen","try_from","try_into","type_id","BISHOP_FIELDS","BISHOP_MAGIC_NUMBERS","BISHOP_SHIFTS","MagicField","ROOK_FIELDS","ROOK_MAGIC_NUMBERS","ROOK_SHIFTS","apply_bishop_magic_for_field","apply_magic_for_field","apply_rook_magic_for_field","attacks","borrow","borrow_mut","deref","deref_mut","drop","from","generate_bishop_number_for_field","generate_magic_number","generate_rook_number_for_field","get_attacks","get_bishop_attacks","get_bishop_mask","get_bishop_moves","get_king_moves","get_knight_moves","get_permutation","get_queen_moves","get_rook_attacks","get_rook_mask","get_rook_moves","init","init","into","magic","mask","new","shift","try_from","try_into","type_id","BISHOP_PROMOTION","BISHOP_PROMOTION_CAPTURE","CAPTURE","DOUBLE_PUSH","EN_PASSANT","FIELD_CAPTURE","FIELD_PROMOTION","FIELD_SPECIAL_0","FIELD_SPECIAL_1","KNIGHT_PROMOTION","KNIGHT_PROMOTION_CAPTURE","LONG_CASTLING","Move","MoveFlags","QUEEN_PROMOTION","QUEEN_PROMOTION_CAPTURE","QUIET","ROOK_PROMOTION","ROOK_PROMOTION_CAPTURE","SHORT_CASTLING","UNDEFINED1","UNDEFINED2","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","data","default","deref","deref","deref_mut","deref_mut","difference","drop","drop","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_long_notation","from_short_notation","get_flags","get_from","get_piece_mobility","get_promotion_piece","get_to","hash","init","init","insert","intersection","intersects","into","into","is_all","is_capture","is_castling","is_empty","is_en_passant","is_legal","is_promotion","is_quiet","ne","ne","new","not","partial_cmp","remove","scan_pawn_moves","scan_pawn_moves_diagonal_attacks","scan_pawn_moves_double_push","scan_pawn_moves_single_push","scan_piece_moves","set","sub","sub_assign","symmetric_difference","to_long_notation","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","BOX_PATTERNS","DIAGONAL_PATTERNS","FILE_PATTERNS","FRONT_PATTERNS","JUMP_PATTERNS","RAIL_PATTERNS","RANK_PATTERNS","STAR_PATTERNS","generate_boxes","generate_diagonals","generate_files","generate_fronts","generate_jumps","generate_rails","generate_ranks","generate_stars","get_box","get_diagonals","get_file","get_front","get_jumps","get_rail","get_rank","get_star","init","ACTIVE_COLOR_HASH","CASTLING_HASHES","EN_PASSANT_HASHES","PIECE_HASHES","get_active_color_hash","get_castling_right_hash","get_en_passant_hash","get_piece_hash","init","recalculate_hash","recalculate_pawn_hash","benchmark","test","tuner","BenchmarkResult","beta_cutoffs","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","late_move_pruning_accepted","late_move_pruning_rejected","leafs_count","move_generator_captures_stages","move_generator_hash_move_stages","move_generator_quiet_moves_stages","nodes_count","non_perfect_cutoffs","null_move_pruning_accepted","null_move_pruning_attempts","null_move_pruning_rejected","pawn_hashtable_added","pawn_hashtable_collisions","pawn_hashtable_hits","pawn_hashtable_misses","perfect_cutoffs","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","reduction_pruning_accepted","reduction_pruning_rejected","result_hash","run","static_null_move_pruning_accepted","static_null_move_pruning_attempts","static_null_move_pruning_rejected","time","try_from","try_into","tt_added","tt_collisions","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","TestPosition","best_move","board","borrow","borrow_mut","deref","deref_mut","drop","from","id","init","into","load_positions","new","run","try_from","try_into","type_id","TunerContext","TunerParameter","TunerPosition","board","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calculate_error","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_header","get_material","get_parameter","get_piece_square_table","init","init","init","into","into","into","load_positions","load_values","max","max_init","min","min_init","new","new","new","positions","result","run","save_values","save_values_internal","save_values_to_i16_array_internal","save_values_to_i8_array_internal","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","value","write_evaluation_parameters","write_piece_square_table"],"q":["inanis","","","","","","","","inanis::cache","","","","inanis::cache::allocator","","","","","","","","","","","","","","","inanis::cache::pawns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::cache::perft","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::cache::search","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine","","","","","","","","","","","","","","","","","inanis::engine::clock","inanis::engine::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine::history","","","","","","","","","","","","","","","","","","","","","inanis::engine::killers","","","","","","","","","","","","","","","","","","","","","inanis::engine::qsearch","","","","","","inanis::engine::search","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::engine::see","","","","","","","inanis::evaluation","","","","","","","","","inanis::evaluation::material","","inanis::evaluation::mobility","","inanis::evaluation::parameters","","","","","","","","","","","","","","","","","","inanis::evaluation::pawns","","","inanis::evaluation::pst","","","","","","","","","","","","inanis::evaluation::pst::bishop","inanis::evaluation::pst::king","inanis::evaluation::pst::knight","inanis::evaluation::pst::pawn","inanis::evaluation::pst::queen","inanis::evaluation::pst::rook","inanis::evaluation::safety","","inanis::interface","","inanis::interface::terminal","","","","","","","","","","","","","","","","","","","","","inanis::interface::uci","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::perft","","","","","inanis::perft::context","","","","","","","","","","","","","","","","","inanis::perft::divided","inanis::perft::fast","inanis::perft::normal","inanis::state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::fen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::movegen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::movescan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::patterns","","","","","","","","","","","","","","","","","","","","","","","","","inanis::state::zobrist","","","","","","","","","","","inanis::utils","","","inanis::utils::benchmark","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inanis::utils::test","","","","","","","","","","","","","","","","","","inanis::utils::tuner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Initializes all engineâ€™s components (random seed, PST, â€¦","","","","","","","","","","","","","","","","Calculates optimal size for the hashtables based on â€¦","","","","","","","","","","Adds a new entry (storing the key and <code>score</code>) using â€¦","","","","","","","","","Constructs a default instance of PawnHashTableEntry with â€¦","","","","","","","","","Gets a wanted entry using <code>hash % self.table.len()</code> formula â€¦","Calculates a key for the <code>hash</code> by taking the last 16 bits â€¦","Calculates an approximate percentage usage of the table, â€¦","","","","","","Constructs a new instance of PawnHashTable by allocating â€¦","Constructs a new instance of PawnHashTableEntry with â€¦","","","","","","","","","","","","","","","Adds a new entry (storing <code>hash</code>, <code>depth</code> and <code>leafs_count</code>) â€¦","","","","","","","","","","","Constructs a default instance of PerftHashTableBucket with â€¦","Constructs a default instance of PerftHashTableEntry with â€¦","","","","","","","","","","","","","","Gets wanted entry using <code>hash % self.table.len()</code> formula to â€¦","Calculates an approximate percentage usage of the table, â€¦","","","","","","","","","Constructs a new instance of PerftHashTable by allocating â€¦","Constructs a new instance of PerftHashTableEntry with â€¦","","","","","","","","","","","","","","","","","","","","","","Adds a new entry (storing the key, <code>score</code>, <code>best_move</code>, <code>depth</code>â€¦","Increments ann age of all entries stored in the table. If â€¦","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Constructs a default instance of TranspositionTableBucket â€¦","Constructs a default instance of TranspositionTableEntry â€¦","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","Returns an empty set of flags.","","","","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","Gets a wanted entry using <code>hash % self.table.len()</code> formula â€¦","Gets an entry age by reading <code>self.type_age</code> field.","Gets an entryâ€™s best move using <code>hash % self.table.len()</code> â€¦","Gets an entry flag by reading <code>self.type_age</code> field and â€¦","Calculates a key for the <code>hash</code> by taking the last 16 bits â€¦","Calculates an approximate percentage usage of the table, â€¦","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Constructs a new instance of TranspositionTable by â€¦","Constructs a new instance of TranspositionTableEntry with â€¦","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the â€¦","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Checks if <code>score</code> is within mate range (from -CHECKMATE_SCOREâ€¦","","","","","Performs a selection sort on <code>moves</code> and <code>move_scores</code> arrays â€¦","Calculates a time which should be allocated for the next â€¦","","","","","","","Implements <code>+=</code> operator for SearchStatistics by adding all â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves PV line from the transposition table, using <code>board</code>â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new instance of SearchContext with parameters â€¦","Constructs a new instance of SearchResult with stored <code>time</code>â€¦","Performs a next iteration of the search, using data stored â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increases <code>[from][to]</code> history slot based on <code>depth</code> value.","Ages all values in the history table by performing square â€¦","","","","","Constructs a default instance of HistoryTable with zeroed â€¦","","","","","Gets <code>[from][to]</code> history slot value, relative to <code>max</code>.","","","","","","","","","","","Adds a new killer <code>r#move</code> at the level specified by <code>ply</code> â€¦","Ages killer table by shifting all ply levels by two â€¦","","","","","Constructs a default instance of KillersTable with zeroed â€¦","","","","Checks if killer <code>r#move</code> exists at the level specified by â€¦","","","","","","","","","","","Assigns scores for <code>moves</code> by filling <code>move_scores</code> array with â€¦","Checks if the futility pruning can be applied for â€¦","Entry point of the quiescence search. The main idea here â€¦","Checks if the score pruning can be applied for <code>move_score</code>. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assigns scores for <code>moves</code> by filling <code>move_scores</code> array with â€¦","","","","","","","","Gets a next move to analyze. This function acts as â€¦","","","The main idea of the late move pruning is to prune all â€¦","The main idea of the late move reduction is to reduce â€¦","Gets the late move depth reduction, called R, based on â€¦","The main idea of the null move pruning is to prune all â€¦","Gets the null move pruning depth reduction, called R, â€¦","The main idea of the razoring is to detect and prune all â€¦","Gets the razoring margin, based on <code>depth</code>. The further from â€¦","The main idea of the reduction pruning is to prune all â€¦","Entry point of the regular search, with generic <code>PV</code> â€¦","The main idea of the static null move pruning (also called â€¦","Gets the static null move pruning margin, based on <code>depth</code>. â€¦","","","","","Evaluates a static exchange evaluation result, based on â€¦","Recursive function called by evaluate to help evaluate a â€¦","Gets a result of the static exchange evaluation, based on â€¦","Gets a piece value based on <code>piece_index</code> saved in SEE â€¦","Converts <code>piece</code> index to SEE piece index, which supports â€¦","Initializes static exchange evaluation table by filling it â€¦","","Initializes dynamic evaluation parameters (like â€¦","","","","","","","Blends <code>opening_score</code> and <code>ending_score</code> with the ratio â€¦","Evaluates material on the <code>board</code> and returns score from the â€¦","Recalculates incremental counters on the <code>board</code>. This â€¦","Evaluates mobility and part of the king safety on the <code>board</code>â€¦","Evaluates mobility and <code>dangered_king_fields</code> on the <code>board</code> â€¦","","","","","","","","","","","","","","","","","","","Evaluates structure of pawns on the <code>board</code> and returns â€¦","Evaluates pawn structure on the <code>board</code> for the specified â€¦","Does the same thing as evaluate, but doesnâ€™t use pawn â€¦","","","","","","","","","","","","","","","","","","","Evaluates king safety on the <code>board</code> and returns score from â€¦","Evaluates pawn structure on the <code>board</code> for the specified â€¦","","","","","","","","Handles <code>benchmark</code> command by running a fixed-depth search â€¦","Handles <code>dperft [depth]</code>, <code>dperft [depth] fen [fen]</code> and â€¦","Handles <code>evaluate [fen]</code> command by printing evaluation for â€¦","Handles <code>help</code> command by printing all available ones.","Handles <code>magic</code> command by printing a fresh set of magic â€¦","Handles <code>perft [depth]</code>, <code>perft [depth] fen [fen]</code> and â€¦","Handles <code>qperft [depth] [threads_count] [hashtable_size_mb]</code>â€¦","Handles <code>quit</code> command by exiting process.","Handles <code>test [epd] [depth] [tries_to_confirm]</code> command by â€¦","Handles â€¦","Handles <code>uci</code> command by entering into the UCI (Universal â€¦","Handles unknown command by printing warning message.","Handles <code>wah</code> command by printing WAH.                  ","Helper function to calculate percent of <code>from</code> within <code>all</code>.","Creates a new board based on the input with FEN or moves â€¦","Entry point of the terminal interface and command loop.","","","","","","","","","","Constructs a default instance of UciState with zeroed â€¦","","","","","Handles <code>debug [on/off]</code> command by setting the proper flag.","Handles <code>go [parameters]</code> command by running a new search â€¦","Handles <code>isready</code> command by waiting for the busy flag, and â€¦","Handles <code>ponderhit</code> command by setting abort and ponder â€¦","Handles <code>position ...</code> command with the following variants:","Handles <code>quit</code> command by terminating engine process.","Handles <code>setoption [name] value [value]</code> command by creating â€¦","Handles <code>stop</code> command by setting abort token, which should â€¦","Handles <code>ucinewgame</code> command by resetting a board state, â€¦","","","","","","","","Recreates transposition table, pawn hashtable, killers â€¦","Entry point of the UCI (Universal Chess Interface) and â€¦","","","","","","Waits for the busy flag before continuing. If the deadline â€¦","","","","","Internal perft function, common for every mode.","","","","","","","","","","","","","","Constructs a new instance of PerftContext with <code>board</code> as â€¦","","","","Entry point of the fixed-<code>depth</code> divided perft, which â€¦","Entry point of the fixed-<code>depth</code> fast perft, which uses both â€¦","Entry point of the fixed-<code>depth</code> simple perft. Use â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of set bits.","Gets an index of the first set bit by counting trailing â€¦","","","Extracts the lowest set isolated bit.","","","","Converts <code>piece</code> into the corresponding character (p/P, n/N, â€¦","Resets the lowest set bit.","Converts piece <code>symbol</code> (p/P, n/N, b/B, r/R, q/Q, k/K) into â€¦","","","","","","","","","","","","","Adds <code>piece</code> on the <code>field</code> with the specified <code>color</code>, also â€¦","Returns the set containing all flags.","Checks if any of the field specified by <code>field_indexes</code> list â€¦","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Constructs a new instance of Bitboard with zeroed values.","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","","Runs full evaluation (material, piece-square tables, â€¦","Runs lazy (fast) evaluations, considering only material â€¦","Runs full evaluation (material, piece-square tables, â€¦","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","","Generates all possible moves (non-captures and captures) â€¦","Gets a list of enemy pieces attacking a field specified by â€¦","Calculates a game phase at the current position: 1.0 means â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Gets piece on the field specified by <code>field_index</code>.","Gets pieceâ€™s color on the field specified by <code>field_index</code>â€¦","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Checks if the field specified by <code>field_index</code> is attacked â€¦","Checks if thereâ€™s fifty move rule draw at the current â€¦","Checks if thereâ€™s an inssuficient material draw:","Check if the king of the <code>color</code> side is checked.","Checks if thereâ€™s threefold repetition draw at the â€¦","Makes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Makes a null move, which is basically a switch of the â€¦","","Moves <code>piece</code> from the field specified by <code>from</code> to the field â€¦","","Constructs a new instance of Bitboard with position â€¦","Constructs a new instance of Bitboard with position â€¦","Constructs a new instance of Bitboard with initial â€¦","Returns the complement of this set of flags.","","","","","","","","","Recalculates boardâ€™s hash entirely.","Recalculates incremental values (material and piece-square â€¦","Recalculates boardâ€™s pawn hash entirely.","Removes the specified flags in-place.","Removes <code>piece</code> on the <code>field</code> with the specified <code>color</code>, also â€¦","Inserts or removes the specified flags depending on the â€¦","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","Converts the boardâ€™s state into FEN.","","","Toggles the specified flags in-place.","","","","","","","Undoes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Undoes a null move, which is basically a switch of the â€¦","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Converts active color from the <code>board</code> into the FEN chunk.","","","Converts Bitboard into the FEN.","","","Converts castling rights from the <code>board</code> into the FEN chunk.","","","","","Converts en passant from the <code>board</code> into the FEN chunk.","Converts <code>epd</code> into the Bitboard. Returns Err with proper â€¦","Parses FENâ€™s active color and stores it into the <code>board</code>. â€¦","Converts <code>fen</code> into the Bitboard. Returns Err with proper â€¦","Parses FENâ€™s castling rights and stores them into the â€¦","Parses FENâ€™s en passant and stores it into the <code>board</code>. â€¦","Parses FENâ€™s fullmove number and stores it into the <code>board</code>â€¦","Parses FENâ€™s halfmove clock and stores it into the <code>board</code>â€¦","Parses FENâ€™s pieces and stores them into the <code>board</code>. â€¦","","Converts fullmove number from the <code>board</code> into the FEN chunk.","Gets a value of the <code>name</code> parameters from the specified <code>epd</code>â€¦","Converts halfmove clock from the <code>board</code> into the FEN chunk.","","","","Constructs a new instance of ParsedEPD with the <code>board</code> and â€¦","Converts pieces from the <code>board</code> into the FEN chunk.","","","","","","","","","","","Applies bishop magic for the field specified by <code>field_index</code>â€¦","Applies a magic number for a set of <code>permutations</code>, <code>attacks</code> â€¦","Applies rook magic for the field specified by <code>field_index</code>, â€¦","","","","","","","","Generates a bishop magic number for the field specified by â€¦","Generates a magic number for a set of <code>permutations</code> and â€¦","Generates a rook magic number for the field specified by â€¦","Helper function to get all possible to move fields, â€¦","Gets a bishop attacks for the field specified by â€¦","Gets a bishop mask for the field specified by <code>field_index</code>, â€¦","Gets a bishop moves for the field specified by <code>field_index</code>â€¦","Gets a king moves for the field specified by <code>field_index</code>, â€¦","Gets a knight moves for the field specified by <code>field_index</code>â€¦","Gets <code>index</code>-th permutation of the <code>mask</code>.  ","Gets a queen moves for the field specified by <code>field_index</code>, â€¦","Gets a rook attacks for the field specified by <code>field_index</code>â€¦","Gets a rook mask for the field specified by <code>field_index</code>, â€¦","Gets a rook moves for the field specified by <code>field_index</code>, â€¦","Initializes move generator by applying built-in magic â€¦","","","","","Constructs a new instance of MagicField with zeroed values.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","","Constructs a new instance of Move with zeroed values.","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","Converts long-notated move (e2e4, a1a8) in <code>text</code> into the â€¦","Converts short-notated move (e4, Rc8, Qxb6) in <code>text</code> into â€¦","Gets flags from the internal data.","Gets source field from the internal data.","Gets <code>PIECE</code> mobility (by counting all possible moves at the â€¦","Gets promotion piece based on the flags saved in the â€¦","Gets destination field from the internal data.","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","Returns <code>true</code> if all flags are currently set.","Checks if the move is a capture (excluding en passant, but â€¦","Checks if the move is a short or long castling.","Returns <code>true</code> if no flags are currently stored.","Checks if the move is en passant.","Checks if the move is legal, using <code>board</code> as the context. â€¦","Checks if the move is a promotion (including captures).","Checks if the move is quiet (single or double pushes).","","","Constructs a new instance of Move with stored <code>from</code>, <code>to</code> and â€¦","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Generates all possible captures for the pawns toward the â€¦","Generates all possible double pushes for the pawns at the â€¦","Generates all possible single pushes for the pawns at the â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Inserts or removes the specified flags depending on the â€¦","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","Converts move into the long notation (e2e4, a1a8).","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Generates box patterns for all fields.","Generates diagonal patterns for all fields.","Generates file patterns for all fields.","Generates front patterns for all fields.","Generates jump patterns for all fiellds.","Generates rail patterns for all fields.","Generates rank patterns for all fields.","Generates star patterns for all fields.","Get a box pattern for the field specified by <code>field_index</code>.","Gets a diagonal pattern for the field specified by â€¦","Gets a file pattern for the field specified by <code>field_index</code>.","Get a front pattern for the field specified by <code>field_index</code>â€¦","Get a jumps pattern for the field specified by <code>field_index</code>.","Get a rail pattern for the field specified by <code>field_index</code>.","Gets a rank pattern for the field specified by <code>field_index</code>.","Get a star pattern for the field specified by <code>field_index</code>.","Initializes all patterns by filling arrays.","","","","","Gets active color hash.","Gets castling right hash based on the <code>current</code> ones and the â€¦","Gets en passant hash for the <code>file</code>.","Gets <code>piece</code> hash with the <code>color</code> for the field specified by â€¦","Initializes Zobrist hashes by filling arrays with random â€¦","Recalculates Zobrist hash for the <code>board</code>.","Recalculates pawn hash for the <code>board</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs a benchmark by performing a fixed-depth search for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","Loads positions from the <code>epd_filename</code> and parses them into â€¦","Constructs a new instance of TestPosition with stored <code>id</code>, â€¦","Runs a test by performing a fixed-<code>depth</code> search for the â€¦","","","","","","","","","","","","","","Calculates an error by evaluating all loaded positions â€¦","","","","","","","","","","","","","","","Gets the generated Rust source file header with timestamp â€¦","Gets the Rust representation of the piece <code>values</code> array.","Gets the Rust representation of the parameter with the â€¦","Gets the Rust representation of the piece-square tables â€¦","","","","","","","Loads positions from the <code>epd_filename</code> and parses them into â€¦","Transforms the current evaluation values into a list of â€¦","","","","","Constructs a new instance of TunerContext with stored â€¦","Constructs a new instance of TunerPosition with stored â€¦","Constructs a new instance of TunerParameter with stored â€¦","","","Runs tuner of evaluation parameters. The input file is â€¦","Transforms <code>values</code> into the evaluation parameters, which â€¦","Saves <code>index</code>-th evaluation parameter stored in <code>values</code> in â€¦","Saves i16 array starting at the <code>index</code> of <code>values</code> in the â€¦","Saves i8 array starting at the <code>index</code> of <code>values</code> in the <code>array</code>â€¦","","","","","","","","","","","Tests the correctness of load_values and save_values â€¦","","Generates <code>parameters.rs</code> file with current evaluation â€¦","Generates piece-square tables (Rust source file with â€¦"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,2,2,3,2,3,2,3,2,3,3,2,3,2,3,2,3,2,3,2,2,2,2,3,2,3,3,2,3,3,2,2,3,2,3,2,3,2,3,0,0,0,0,4,4,5,6,4,5,6,5,6,5,6,5,6,4,5,6,4,5,6,4,5,6,5,4,5,6,4,4,4,5,6,4,5,6,6,6,4,6,4,5,6,4,5,6,4,5,6,4,5,6,7,7,0,7,7,0,0,0,0,8,8,7,9,7,7,7,7,7,7,7,7,8,7,10,9,8,7,10,9,7,10,9,7,10,9,7,7,7,10,9,9,8,7,10,9,8,7,10,9,7,8,7,10,9,7,10,7,7,7,7,7,7,7,8,7,10,9,7,7,7,7,8,9,8,9,8,8,7,8,7,10,9,7,7,7,8,7,10,9,7,7,9,7,8,9,7,7,7,9,7,9,7,7,7,8,7,10,9,7,8,7,10,9,8,7,10,9,9,8,7,10,9,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,12,12,11,13,11,13,14,15,12,11,13,14,15,12,12,12,13,11,11,15,12,14,11,13,14,15,12,11,13,14,15,12,11,13,14,15,12,11,11,13,14,15,12,11,11,11,11,13,11,11,13,14,15,12,11,13,14,15,12,11,11,13,12,12,12,11,11,12,12,12,12,11,11,14,11,12,12,12,12,12,11,13,12,12,12,12,12,11,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,11,11,15,12,12,12,11,14,11,14,11,12,11,11,11,11,11,13,14,15,12,11,13,14,15,12,12,12,12,12,12,12,11,13,14,15,12,11,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,0,0,0,0,0,18,18,18,18,18,18,18,0,18,18,0,0,0,0,0,0,0,0,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,0,0,19,19,19,19,19,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,0,0,21,21,21,21,22,22,21,22,21,21,21,21,21,21,21,21,21,22,21,22,22,22,22,21,22,21,22,21,21,21,22,21,22,21,22,21,21,22,21,22,22,21,22,22,22,21,21,21,21,21,21,21,22,21,21,21,21,22,22,22,22,22,22,22,22,22,21,22,22,21,22,21,21,21,21,22,21,21,22,22,22,22,22,22,22,22,22,21,22,22,22,21,22,22,21,22,22,22,22,22,22,22,22,21,22,21,21,21,21,22,21,22,21,21,22,21,22,21,22,22,22,21,0,0,23,23,0,23,23,0,23,23,23,23,0,0,0,0,0,0,0,0,0,23,0,0,0,23,23,23,23,0,23,23,23,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,25,26,25,26,25,26,25,25,25,26,26,25,26,25,26,25,25,26,25,25,26,25,25,25,25,25,25,25,26,25,25,25,25,26,26,26,26,0,26,26,25,25,26,25,25,25,25,26,25,26,26,25,26,26,26,26,25,26,26,25,25,25,0,0,0,0,0,25,25,25,25,26,25,26,25,25,26,25,26,25,26,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,0,28,0,28,28,28,0,0,0,29,30,29,31,30,29,31,0,31,31,30,29,31,30,29,31,30,29,31,30,29,31,0,0,0,0,30,29,31,30,29,31,0,0,31,31,31,31,30,29,31,30,29,0,0,0,0,0,31,30,29,31,30,29,31,30,29,31,0,31,0,0],"f":[null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]],["allocationresult",3]],[[],["usize",15]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["u64",15],["i16",15]]],[[]],[[]],[[]],[[]],[[],["pawnhashtable",3]],[[],["pawnhashtableentry",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["u64",15],["bool",15]],["option",4,[["pawnhashtableentry",3]]]],[[["u64",15]],["u16",15]],[[],["f32",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["usize",15]]],[[["u16",15],["i16",15]]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["u64",15],["u8",15],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["perfthashtablebucket",3]],[[],["perfthashtableentry",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[["u64",15],["u8",15]],["option",4,[["perfthashtableentry",3]]]],[[],["f32",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["u64",15],["u8",15],["u64",15]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["u64",15],["i16",15],["move",3],["i8",15],["u16",15],["transpositiontablescoretype",3]]],[[]],[[]],null,[[]],[[]],[[["transpositiontablescoretype",3]]],[[]],[[],["u8",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transpositiontablescoretype",3]],[[],["transpositiontablebucket",3]],[[],["transpositiontableentry",3]],[[]],[[]],[[]],[[["transpositiontablescoretype",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["transpositiontablescoretype",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[["u64",15],["u16",15],["bool",15]],["option",4,[["transpositiontableentry",3]]]],[[],["u8",15]],[[["u64",15]],["option",4,[["move",3]]]],[[],["transpositiontablescoretype",3]],[[["u64",15]],["u16",15]],[[],["f32",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["transpositiontablescoretype",3]],["bool",15]],[[["usize",15]]],[[["u16",15],["i16",15],["move",3],["i8",15],["transpositiontablescoretype",3]]],[[]],[[["transpositiontablescoretype",3]],["option",4,[["ordering",4]]]],[[]],null,[[["bool",15]]],[[["u8",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["i16",15]],["bool",15]],null,null,null,null,[[["usize",15],["usize",15]],["move",3]],[[["u16",15],["u32",15],["u32",15],["u32",15]],["u32",15]],null,null,null,null,null,null,[[["searchstatistics",3]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["searchstatistics",3]],[[]],null,null,null,[[],["token",3]],[[],["searchstatistics",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[]],[[]],[[["bitboard",3],["i8",15]],["vec",3,[["move",3]]]],null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["bitboard",3],["u32",15],["u32",15],["i8",15],["u64",15],["u32",15],["u32",15],["bool",15],["bool",15],["transpositiontable",3],["pawnhashtable",3],["killerstable",3],["historytable",3],["token",3],["token",3]]],[[["u64",15],["i8",15],["i16",15],["vec",3,[["move",3]]],["searchstatistics",3]]],[[],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["utf8charsplitter",3]],[[]],[[],["utf16charsplitter",3]],[[],["utf16charmerger",3]],[[],["utf8charmerger",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["u8",15],["u8",15],["u8",15]]],[[]],[[]],[[]],[[],["historytable",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["u8",15],["u8",15],["u8",15]],["u8",15]],[[],["usize",15]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["u16",15],["move",3]]],[[]],[[]],[[]],[[],["killerstable",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u16",15],["move",3]],["bool",15]],[[]],[[],["usize",15]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["searchcontext",3],["usize",15]]],[[["i16",15],["i16",15],["i16",15]],["bool",15]],[[["searchcontext",3],["i8",15],["u16",15],["i16",15],["i16",15]],["i16",15]],[[["i16",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["searchcontext",3],["usize",15],["usize",15],["move",3],["u16",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["movegeneratorstage",4]],["bool",15]],[[]],[[["searchcontext",3],["movegeneratorstage",4],["usize",15],["usize",15],["move",3],["u64",15],["u16",15]],["option",4,[["move",3]]]],[[],["usize",15]],[[]],[[["i8",15],["usize",15],["i16",15],["bool",15]],["bool",15]],[[["i8",15],["move",3],["usize",15],["i16",15],["bool",15],["bool",15]],["bool",15]],[[["usize",15]],["i8",15]],[[["searchcontext",3],["i8",15],["i16",15],["bool",15],["bool",15]],["bool",15]],[[["i8",15]],["i8",15]],[[["i8",15],["i16",15],["bool",15]],["bool",15]],[[["i8",15]],["i16",15]],[[["i8",15],["i8",15]],["bool",15]],[[["searchcontext",3],["i8",15],["u16",15],["i16",15],["i16",15],["bool",15],["bool",15]],["i16",15]],[[["i8",15],["i16",15],["bool",15]],["bool",15]],[[["i8",15]],["i16",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["u8",15],["u8",15],["u8",15]],["i16",15]],[[["u8",15],["u8",15],["u8",15],["u8",15]],["i16",15]],[[["u8",15],["u8",15],["u8",15],["u8",15]],["i16",15]],[[["u8",15]],["i16",15]],[[["u8",15]],["u8",15]],[[]],null,[[]],null,null,null,null,null,null,[[["f32",15],["i16",15],["i16",15]],["i16",15]],[[["bitboard",3]],["i16",15]],[[["bitboard",3]]],[[["bitboard",3],["u32",15],["u32",15]],["i16",15]],[[["bitboard",3],["u8",15],["u32",15]],["i16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bitboard",3],["pawnhashtable",3],["searchstatistics",3]],["i16",15]],[[["bitboard",3],["u8",15]],["i16",15]],[[["bitboard",3]],["i16",15]],null,null,[[["u8",15]]],[[["bitboard",3]],["i16",15]],[[["u8",15],["u8",15],["u8",15],["u8",15]],["i16",15]],[[]],null,null,null,null,[[["bitboard",3]]],null,null,null,null,null,null,null,[[["bitboard",3],["u32",15],["u32",15]],["i16",15]],[[["bitboard",3],["u32",15]],["i16",15]],null,null,null,null,null,null,null,[[]],[[["vec",3,[["str",15]]]]],[[["vec",3,[["str",15]]]]],[[]],[[]],[[["vec",3,[["str",15]]]]],[[["vec",3,[["str",15]]]]],[[]],[[["vec",3,[["str",15]]]]],[[["vec",3,[["str",15]]]]],[[]],[[]],[[]],[[["u64",15],["u64",15]],["f32",15]],[[],["result",4,[["bitboard",3],["str",15]]]],[[]],null,null,null,null,null,[[]],[[]],null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["arc",3]]],[[["arc",3]]],[[["arc",3]]],[[["arc",3]]],[[["arc",3]]],[[]],[[["arc",3]]],[[["arc",3]]],[[["arc",3]]],null,[[],["usize",15]],[[]],null,null,null,null,[[["arc",3]]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3]]],null,null,null,null,[[["perftcontext",3],["i32",15]],["u64",15]],null,null,[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],null,[[],["usize",15]],[[]],[[["bitboard",3],["arc",3],["bool",15],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["i32",15],["bitboard",3]],["vec",3]],[[["i32",15],["bitboard",3],["usize",15],["usize",15]]],[[["i32",15],["bitboard",3],["bool",15]],["u64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["u8",15]],[[["u64",15]],["u8",15]],null,null,[[["u64",15]],["u64",15]],null,null,null,[[["u8",15]],["result",4,[["char",15],["str",15]]]],[[["u64",15]],["u64",15]],[[["char",15]],["result",4,[["u8",15],["str",15]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",15],["u8",15],["u8",15]]],[[]],[[["u8",15]],["bool",15]],[[]],[[]],[[["castlingrights",3]]],[[]],[[],["u8",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["castlingrights",3]],[[],["bitboard",3]],[[]],[[]],[[["castlingrights",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,[[["castlingrights",3]],["bool",15]],[[["pawnhashtable",3],["searchstatistics",3]],["i16",15]],[[],["i16",15]],[[],["i16",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],null,[[["u64",15]],["usize",15]],[[["u8",15],["u8",15]],["u8",15]],[[],["f32",15]],[[["usize",15],["u64",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],null,null,[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["u8",15],["u8",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u8",15]],["bool",15]],[[],["bool",15]],[[["move",3]]],[[]],null,[[["u8",15],["u8",15],["u8",15],["u8",15]]],[[["castlingrights",3]],["bool",15]],[[["str",15]],["result",4,[["str",15]]]],[[],["result",4,[["str",15]]]],[[]],[[]],null,null,[[["castlingrights",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["u8",15],["u8",15],["u8",15]]],[[["bool",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["move",3]]],[[]],[[]],null,[[["bitboard",3]],["string",3]],null,null,[[["bitboard",3]],["string",3]],[[]],[[]],[[["bitboard",3]],["string",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bitboard",3]],["string",3]],[[["str",15]],["result",4,[["parsedepd",3],["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[["str",15]],["result",4,[["bitboard",3],["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[["bitboard",3],["str",15]],["result",4,[["str",15]]]],[[]],[[["bitboard",3]],["string",3]],[[["str",15]],["option",4,[["string",3]]]],[[["bitboard",3]],["string",3]],null,[[],["usize",15]],[[]],[[["bitboard",3]]],[[["bitboard",3]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["usize",15]]],[[["magicfield",3]]],[[["usize",15]]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]],["u64",15]],[[["u8",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["u64",15],["usize",15]],["u64",15]],[[]],[[],["usize",15]],[[]],null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["moveflags",3]]],[[]],[[],["u8",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["moveflags",3]],[[],["move",3]],[[]],[[]],[[["moveflags",3]],["ordering",4]],[[]],[[],["bool",15]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["moveflags",3]],["bool",15]],[[["move",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[["str",15],["bitboard",3]],["result",4,[["move",3],["str",15]]]],[[["str",15],["bitboard",3]],["result",4,[["move",3],["str",15]]]],[[],["moveflags",3]],[[],["u8",15]],[[["bitboard",3],["u8",15],["u32",15]],["i16",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bitboard",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["moveflags",3]],["bool",15]],[[["move",3]],["bool",15]],[[["u8",15],["u8",15],["moveflags",3]]],[[]],[[["moveflags",3]],["option",4,[["ordering",4]]]],[[]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bitboard",3],["usize",15],["u64",15]],["usize",15]],[[["bool",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[]],null,null,null,null,[[],["u64",15]],[[["castlingrights",3],["castlingrights",3]],["u64",15]],[[["u8",15]],["u64",15]],[[["u8",15],["u8",15],["u8",15]],["u64",15]],[[]],[[["bitboard",3]]],[[["bitboard",3]]],null,null,null,null,null,[[]],[[]],[[],["benchmarkresult",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["benchmarkresult",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[],["usize",15]],[[]],[[["str",15]],["result",4,[["vec",3,[["testposition",3]]],["str",15]]]],[[["string",3],["bitboard",3],["move",3]]],[[["str",15],["i8",15],["i8",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3],["f64",15],["usize",15]],["f64",15]],[[],["tunerparameter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["f64",15]],["string",3]],[[["str",15]],["string",3]],[[["str",15],["i16",15]],["string",3]],[[],["string",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["str",15]],["result",4,[["unsafecell",3,[["vec",3,[["tunerposition",3]]]]],["str",15]]]],[[["bool",15],["bool",15]],["vec",3,[["tunerparameter",3]]]],null,null,null,null,[[["unsafecell",3,[["vec",3,[["tunerposition",3]]]]]]],[[["bitboard",3],["f64",15]]],[[["i16",15],["i16",15],["i16",15],["i16",15],["i16",15]]],null,null,[[["str",15],["str",15],["bool",15],["bool",15],["usize",15]]],[[["vec",3],["bool",15]]],[[["vec",3],["i16",15],["usize",15]]],[[["vec",3],["usize",15]]],[[["vec",3],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,[[["str",15],["f64",15]]],[[["str",15],["f64",15],["str",15]]]],"p":[[3,"AllocationResult"],[3,"PawnHashTable"],[3,"PawnHashTableEntry"],[3,"PerftHashTable"],[3,"PerftHashTableBucket"],[3,"PerftHashTableEntry"],[3,"TranspositionTableScoreType"],[3,"TranspositionTable"],[3,"TranspositionTableEntry"],[3,"TranspositionTableBucket"],[3,"SearchContext"],[3,"SearchStatistics"],[3,"HelperThreadContext"],[3,"SearchResult"],[3,"Token"],[3,"HistoryTable"],[3,"KillersTable"],[4,"MoveGeneratorStage"],[3,"UciState"],[3,"PerftContext"],[3,"CastlingRights"],[3,"Bitboard"],[3,"ParsedEPD"],[3,"MagicField"],[3,"MoveFlags"],[3,"Move"],[3,"BenchmarkResult"],[3,"TestPosition"],[3,"TunerPosition"],[3,"TunerContext"],[3,"TunerParameter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};