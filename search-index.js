var searchIndex = new Map(JSON.parse('[\
["inanis",{"doc":"The main page of the Inanis documentation. Feel free to â€¦","t":"IICCCCCCCCCCCCCCCCFFNNNNNNNNNNNOONNNNNNSFFNNNNNNNONNNNNNONONNNNNNSFFNNNNNNONNNNNNONNNNNNFFFNNNNNNNNNNNNNNNNNNNOONNOOOONONNNNNNNNNSFFFFNNNNNNNNNONNONNNNNNNNNNNOONNONNNNNNNNNNNNSFFFFCNOONNNNNNNNNNOONNNNNNNNNNNNNNNOONNNONONNNNNNNNONNNNSSSSSSSSSSSSCCHCCCCCCHFFFOONNNNNNOOOONNNOOONNNNOOOOOOOOONNNNOOOOOOOOOOOOOOOOOONNNNNNONNNOHFOTOTOTOTNNNNNNOTOTOTOTNOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTOTNNNNCECHHHHCECPPPPPSSSSSSSSSSSSSGFPPPPPHHNNNNNNOONNHONNOOOOOOOOOONNNNNNHHHHHHHHHHHHHHHSSSSSJHHHHHHFNONNOONNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNOOOOONSSSFNNNNNNONNNNNCCNNCCCQCNNNNNNNFONNHNHNONNNFFFOONNNNNNNHNNNHONNNOOOOOOOOOONNNNNNNNNSSSSSSSSSSSSSSSSSSSSFOONNOOHHHNHNOOOONNNESSEEEEECHHCCCCHCSSSSSSFONNHHNHNOOONNNCCSSSSSSSSHHHHHHHHHHHHSSFFSONNNNNNOONONNHHHHHHHHHHNNOONNOOOHHNNNNNONNOCCCCHFFONNNNOOOONOONNONNNOONNNNNNHHFNNNNNOHONNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSCCCCCCSSJFSSJHHHONNNNNNHHHHHHHHHHHHHHHNOONONNNNFCNNNNONNNNNNNNHNNNNNNNNNNNNNNNNHHHHHNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSHHHHHHHHHHHHFFCNNNNNNOONNNNNONNNNNNOONNNNNNNNOONNNNNNNNNNNNNNOOOOOONONNNNNOOONNNNNNNNNNNNNSSSSSSSSCCCHHFOOHHNNHOHHHHHHHHHNHHHONNHHNNNFFFNNNNNNOOOONNNNNNNONNNNNONNNNNNNNNSSSSHHHHHHHHHHPPFGPNNNNONNNNHNNONCNNNNNNOCCSSSSSSSJSSSSSSSSSSSSSSSSSSSSSSSSSSSSIFFSSSSSSSSSSSSSSSSSHHJHHINNNNNNNNSNNNNJIIIIIIIIINNOOOOOOOHHHHHHHHHNNSNNNNNNIIIIIIIIIIIHHHHCFONNOONNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOHOOOONNOOOOONQCCQCQQQCKRQMKRMQMMMKMMQFSNNNHHHHNHNHQHONNNHHHHH","n":["MoveScores","Moves","cache","engine","evaluation","interface","perft","state","tablebases","testing","tuning","utils","counters","history","killers","pawns","perft","search","CMTable","CMTableEntry","add","borrow","borrow","borrow_mut","borrow_mut","default","from","from","get","into","into","move","table","try_from","try_from","try_into","try_into","type_id","type_id","AGING_DIVISOR","HTable","HTableEntry","add","age_value","age_values","borrow","borrow","borrow_mut","borrow_mut","data","default","from","from","get","into","into","max","punish","table","try_from","try_from","try_into","try_into","type_id","type_id","KILLER_SLOTS","KTable","KTableEntry","add","borrow","borrow","borrow_mut","borrow_mut","clear","data","default","from","from","get","into","into","table","try_from","try_from","try_into","try_into","type_id","type_id","PHTable","PHTableEntry","PHTableResult","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","from","from","from","get","get_data","get_index","get_key","get_usage","into","into","into","key","key","new","new","score_ending","score_ending","score_opening","score_opening","set_data","table","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BUCKET_SLOTS","PerftHashTable","PerftHashTableBucket","PerftHashTableEntry","PerftHashTableResult","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","default","default","entries","from","from","from","from","get","get_index","get_usage","into","into","into","into","key","leafs_count","new","new","table","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BUCKET_SLOTS","TTable","TTableBucket","TTableEntry","TTableResult","TTableScoreType","add","age","best_move","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","depth","entries","from","from","from","from","get","get_best_move","get_data","get_index","get_key","get_pv_line","get_usage","into","into","into","into","key","key_data","new","new","prefetch","score","set_data","table","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","EXACT_SCORE","INVALID","LOWER_BOUND","UPPER_BOUND","CHECKMATE_SCORE","DRAW_SCORE","INVALID_SCORE","MAX_DEPTH","MAX_MOVES_COUNT","MIN_ALPHA","MIN_BETA","TBMATE_SCORE","clock","context","is_score_near_checkmate","movesort","params","qsearch","search","see","stats","get_time_bounds","SearchContext","SearchResult","SearchResultLine","abort_flag","board","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cmtable","current_depth","depth","forced_depth","from","from","from","helper_contexts","htable","inc_time","into","into","into","into_iter","ktable","last_score","lines","max_move_time","max_nodes_count","max_soft_nodes_count","moves_to_go","moves_to_search","multipv","new","new","new","next","params","phtable","ponder_flag","ponder_mode","pv_line","score","search_done","search_id","search_noise","search_time_start","soft_nodes","stats","syzygy_enabled","syzygy_probe_depth","syzygy_probe_limit","time","time","time_hard_bound","try_from","try_from","try_from","try_into","try_into","try_into","ttable","type_id","type_id","type_id","uci_debug","sort_next_move","SearchParams","aspwin_delta","aspwin_delta","aspwin_max_delta","aspwin_max_delta","aspwin_min_depth","aspwin_min_depth","aspwin_multiplier","aspwin_multiplier","borrow","borrow_mut","clone","clone_into","default","from","iir_max_reduction","iir_max_reduction","iir_min_depth","iir_min_depth","iir_reduction_base","iir_reduction_base","iir_reduction_step","iir_reduction_step","into","lmp_max_depth","lmp_max_depth","lmp_max_score","lmp_max_score","lmp_min_depth","lmp_min_depth","lmp_move_index_margin_base","lmp_move_index_margin_base","lmp_move_index_margin_multiplier","lmp_move_index_margin_multiplier","lmr_max_reduction","lmr_max_reduction","lmr_max_score","lmr_max_score","lmr_min_depth","lmr_min_depth","lmr_min_move_index","lmr_min_move_index","lmr_pv_max_reduction","lmr_pv_max_reduction","lmr_pv_min_move_index","lmr_pv_min_move_index","lmr_pv_reduction_base","lmr_pv_reduction_base","lmr_pv_reduction_step","lmr_pv_reduction_step","lmr_reduction_base","lmr_reduction_base","lmr_reduction_step","lmr_reduction_step","nmp_depth_base","nmp_depth_base","nmp_depth_divider","nmp_depth_divider","nmp_margin","nmp_margin","nmp_min_depth","nmp_min_depth","q_futility_pruning_margin","q_futility_pruning_margin","q_score_pruning_treshold","q_score_pruning_treshold","razoring_depth_margin_base","razoring_depth_margin_base","razoring_depth_margin_multiplier","razoring_depth_margin_multiplier","razoring_min_depth","razoring_min_depth","snmp_depth_margin_base","snmp_depth_margin_base","snmp_depth_margin_multiplier","snmp_depth_margin_multiplier","snmp_min_depth","snmp_min_depth","time_a","time_a","time_b","time_b","time_c","time_c","time_d","time_d","time_e","time_e","time_hard_bound","time_hard_bound","time_soft_bound","time_soft_bound","to_owned","try_from","try_into","type_id","movepick","run","runner","assign_move_scores","futility_pruning_can_be_applied","run","score_pruning_can_be_applied","movepick","run","runner","AllGenerated","Captures","Counters","HashMove","Killers","MOVEORD_BISHOP_PROMOTION","MOVEORD_CASTLING","MOVEORD_COUNTERMOVE","MOVEORD_HASH_MOVE","MOVEORD_HISTORY_MOVE","MOVEORD_HISTORY_MOVE_OFFSET","MOVEORD_KILLER_MOVE_1","MOVEORD_KILLER_MOVE_2","MOVEORD_KNIGHT_PROMOTION","MOVEORD_LOSING_CAPTURES_OFFSET","MOVEORD_QUEEN_PROMOTION","MOVEORD_ROOK_PROMOTION","MOVEORD_WINNING_CAPTURES_OFFSET","MoveGenStage","MoveGenState","ReadyToCheckHashMove","ReadyToGenerateCaptures","ReadyToGenerateCounters","ReadyToGenerateKillers","ReadyToGenerateQuiets","assign_capture_scores","assign_quiet_scores","borrow","borrow","borrow_mut","borrow_mut","default","eq","evasion_mask","friendly_king_checked","from","from","get_next_move","hash_move","into","into","killer_moves","move_index","move_number","move_scores","moves","moves_count","ply","previous_move","quiet_moves_start_index","stage","try_from","try_from","try_into","try_into","type_id","type_id","check_extensions_can_be_applied","check_extensions_get_e","iir_can_be_applied","iir_get_r","lmp_can_be_applied","lmr_can_be_applied","lmr_get_r","nmp_can_be_applied","nmp_get_r","razoring_can_be_applied","razoring_get_margin","run","run_internal","snmp_can_be_applied","snmp_get_margin","SEE_KING_VALUE","SEE_KNISHOP_VALUE","SEE_PAWN_VALUE","SEE_QUEEN_VALUE","SEE_ROOK_VALUE","SEE_TABLE","evaluate","evaluate_internal","get","get_piece_value","get_see_piece_index","init","SearchStats","add_assign","beta_cutoffs","borrow","borrow_mut","cmtable_illegal_moves","cmtable_legal_moves","default","from","into","ktable_illegal_moves","ktable_legal_moves","leafs_count","lmp_accepted","lmp_rejected","max_ply","movegen_captures_stages","movegen_counters_stages","movegen_hash_move_stages","movegen_killers_stages","movegen_quiets_stages","nmp_accepted","nmp_attempts","nmp_rejected","nodes_count","non_perfect_cutoffs","perfect_cutoffs","phtable_added","phtable_hits","phtable_misses","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","snmp_accepted","snmp_attempts","snmp_rejected","tb_hits","try_from","try_into","tt_added","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","INITIAL_GAME_PHASE","PIECE_PHASE_VALUES","PIECE_VALUES","PackedEval","add","add_assign","borrow","borrow_mut","clone","clone_into","data","default","from","get_ending","get_opening","into","material","mobility","new","new_raw","params","pawns","pst","s","safety","sub","sub_assign","taper_score","to_owned","try_from","try_into","type_id","MaterialData","bishop_pair","borrow","borrow_mut","evaluate","from","get_material_data","into","pawns_attacking_pieces","try_from","try_into","type_id","EvalAux","MobilityData","PieceMobility","bishop_mobility","bishop_threats","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","evaluate","from","from","from","get_mobility_data","inner","into","into","into","king_area_threats","knight_mobility","knight_threats","outer","queen_mobility","queen_threats","rook_mobility","rook_open_file","rook_semi_open_file","rook_threats","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BACKWARD_PAWN_CLOSED_FILE","BACKWARD_PAWN_OPEN_FILE","BISHOP_PAIR","BISHOP_SAFE_CHECKS","CHAINED_PAWN","DOUBLED_PAWN","ISOLATED_PAWN","KING_AREA_THREATS","KNIGHT_SAFE_CHECKS","MOBILITY_INNER","MOBILITY_OUTER","PASSED_PAWN","PAWNS_ATTACKING_PIECES","PAWN_SHIELD","PAWN_SHIELD_OPEN_FILE","QUEEN_SAFE_CHECKS","ROOK_OPEN_FILE","ROOK_SAFE_CHECKS","ROOK_SEMI_OPEN_FILE","TEMPO","PawnsData","backward_pawns_closed_file","backward_pawns_open_file","borrow","borrow_mut","chained_pawns","doubled_pawns","evaluate","evaluate_color","evaluate_without_cache","from","get_pawns_data","into","isolated_pawns","opened_files","passed_pawns","pawn_shield","try_from","try_into","type_id","BISHOP_PST_PATTERN","KING_BUCKETS","KING_BUCKETS_COUNT","KING_PST_PATTERN","KNIGHT_PST_PATTERN","PAWN_PST_PATTERN","QUEEN_PST_PATTERN","ROOK_PST_PATTERN","bishop","evaluate","get_pst_value","king","knight","pawn","queen","recalculate_incremental_values","rook","BISHOP_PST_PATTERN","KING_PST_PATTERN","KNIGHT_PST_PATTERN","PAWN_PST_PATTERN","QUEEN_PST_PATTERN","ROOK_PST_PATTERN","SafetyData","bishop_safe_checks","borrow","borrow_mut","evaluate","evaluate_color","from","get_safety_data","into","knight_safe_checks","queen_safe_checks","rook_safe_checks","try_from","try_into","type_id","terminal","uci","AUTHOR","COMPILER","DATE","LICENSE","PROFILE","REPOSITORY","TARGET","VERSION","handle_benchmark","handle_dperft","handle_evaluate","handle_help","handle_perft","handle_qperft","handle_quit","handle_uci","handle_unknown_command","handle_wah","prepare_board","run","AUTHOR","PAWN_HASHTABLE_SIZE","UciOption","UciState","VERSION","abort_flag","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","context","debug_mode","default","default","from","from","handle_debug","handle_fen","handle_go","handle_isready","handle_ponderhit","handle_position","handle_quit","handle_setoption","handle_stop","handle_ucinewgame","into","into","max","min","new","new_wide","options","order","ponder_flag","recreate_state_tables","run","to_owned","try_from","try_from","try_into","try_into","type","type_id","type_id","value","context","divided","fast","normal","run_internal","PerftContext","PerftStats","board","borrow","borrow","borrow_mut","borrow_mut","captures","castles","check_integrity","checks","default","en_passants","fast","from","from","hashtable","into","into","new","promotions","stats","try_from","try_from","try_into","try_into","type_id","type_id","run","run","NormalPerftResult","borrow","borrow_mut","from","into","new","nodes","run","stats","try_from","try_into","type_id","A1","A1_BB","A2","A2_BB","A3","A3_BB","A4","A4_BB","A5","A5_BB","A6","A6_BB","A7","A7_BB","A8","A8_BB","ALL_COLORS","ALL_FILES","ALL_PHASES","ALL_PIECES","ALL_POVS","ALL_RANKS","ALL_SQUARES","B1","B1_BB","B2","B2_BB","B3","B3_BB","B4","B4_BB","B5","B5_BB","B6","B6_BB","B7","B7_BB","B8","B8_BB","BISHOP","BLACK","BLACK_SQUARES_BB","C1","C1_BB","C2","C2_BB","C3","C3_BB","C4","C4_BB","C5","C5_BB","C6","C6_BB","C7","C7_BB","C8","C8_BB","CENTER_BB","D1","D1_BB","D2","D2_BB","D3","D3_BB","D4","D4_BB","D5","D5_BB","D6","D6_BB","D7","D7_BB","D8","D8_BB","E1","E1_BB","E2","E2_BB","E3","E3_BB","E4","E4_BB","E5","E5_BB","E6","E6_BB","E7","E7_BB","E8","E8_BB","EDGE_BB","ENDING","F1","F1_BB","F2","F2_BB","F3","F3_BB","F4","F4_BB","F5","F5_BB","F6","F6_BB","F7","F7_BB","F8","F8_BB","FILE_A_BB","FILE_B_BB","FILE_C_BB","FILE_D_BB","FILE_E_BB","FILE_F_BB","FILE_G_BB","FILE_H_BB","G1","G1_BB","G2","G2_BB","G3","G3_BB","G4","G4_BB","G5","G5_BB","G6","G6_BB","G7","G7_BB","G8","G8_BB","H1","H1_BB","H2","H2_BB","H3","H3_BB","H4","H4_BB","H5","H5_BB","H6","H6_BB","H7","H7_BB","H8","H8_BB","KING","KNIGHT","LEFT","OPENING","OUTSIDE_BB","PAWN","QUEEN","RANK_1_BB","RANK_2_BB","RANK_3_BB","RANK_4_BB","RANK_5_BB","RANK_6_BB","RANK_7_BB","RANK_8_BB","RIGHT","ROOK","THEM","US","WHITE","WHITE_SQUARES_BB","movegen","movescan","patterns","representation","text","zobrist","BISHOP_MAGIC_NUMBERS","BISHOP_SHIFTS","BISHOP_SQUARES","MagicSquare","ROOK_MAGIC_NUMBERS","ROOK_SHIFTS","ROOK_SQUARES","apply_bishop_magic","apply_magic_for_square","apply_rook_magic","attacks","borrow","borrow_mut","clone","clone_into","default","from","generate_bishop_magic_number","generate_magic_number","generate_rook_magic_number","get_attacks","get_bishop_attacks","get_bishop_mask","get_bishop_moves","get_king_moves","get_knight_moves","get_permutation","get_queen_moves","get_rook_attacks","get_rook_mask","get_rook_moves","init","into","magic","mask","new","shift","to_owned","try_from","try_into","type_id","Move","MoveFlags","borrow","borrow_mut","clone","clone_into","data","default","eq","fmt","from","from_long_notation","from_short_notation","get_flags","get_from","get_piece_mobility","get_promotion_piece","get_to","into","is_capture","is_castling","is_double_push","is_empty","is_en_passant","is_legal","is_promotion","is_quiet","is_single_push","is_some","new","new_from_raw","new_random","scan_pawn_moves","scan_pawn_moves_diagonal_attacks","scan_pawn_moves_double_push","scan_pawn_moves_single_push","scan_piece_moves","to_long_notation","to_owned","to_string","try_from","try_into","type_id","BISHOP_PROMOTION","BISHOP_PROMOTION_CAPTURE","BIT_CAPTURE","BIT_PROMOTION","BIT_SPECIAL_0","BIT_SPECIAL_1","CAPTURE","DOUBLE_PUSH","EN_PASSANT","KNIGHT_PROMOTION","KNIGHT_PROMOTION_CAPTURE","LONG_CASTLING","QUEEN_PROMOTION","QUEEN_PROMOTION_CAPTURE","ROOK_PROMOTION","ROOK_PROMOTION_CAPTURE","SHORT_CASTLING","SINGLE_PUSH","UNDEFINED1","UNDEFINED2","BOX_PATTERNS","DIAGONAL_PATTERNS","FRONT_PATTERNS","JUMP_PATTERNS","RAIL_PATTERNS","generate_boxes","generate_diagonals","generate_fronts","generate_jumps","generate_rails","get_box","get_diagonals","get_file","get_front","get_jumps","get_rail","get_rank","Board","BoardState","CastlingRights","add_piece","are_squares_attacked","borrow","borrow","borrow_mut","borrow_mut","captured_piece","castling_rights","clone","clone","clone_into","clone_into","default","en_passant","evaluate","evaluate_fast","evaluate_without_cache","fmt","from","from","fullmove_number","game_phase","get_all_moves","get_attacking_pieces","get_instant_move","get_moves","get_piece","get_piece_color","get_pieces_count","get_tablebase_move","halfmove_clock","hash","into","into","is_fifty_move_rule_draw","is_insufficient_material_draw","is_king_checked","is_repetition_draw","is_square_attacked","make_move","make_null_move","move_piece","new","new_from_fen","new_from_moves","new_initial_position","null_moves","occupancy","pawn_attacks","pawn_hash","piece_table","pieces","pop_state","pst_score","push_state","recalculate_hashes","recalculate_incremental_values","recalculate_pawn_attacks","remove_piece","state","state_stack","stm","to_epd","to_fen","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","undo_move","undo_null_move","ALL","BLACK_CASTLING","BLACK_LONG_CASTLING","BLACK_SHORT_CASTLING","NONE","WHITE_CASTLING","WHITE_LONG_CASTLING","WHITE_SHORT_CASTLING","fen","moves","pgn","piece_to_symbol","symbol_to_piece","ParsedEPD","best_move","board","board_to_epd","board_to_fen","borrow","borrow_mut","castling_to_fen","comment","en_passant_to_fen","epd_to_board","fen_to_board","fen_to_castling","fen_to_en_passant","fen_to_fullmove_number","fen_to_halfmove_clock","fen_to_pieces","fen_to_stm","from","fullmove_number_to_fen","get_epd_parameter","halfmove_clock_to_fen","id","into","new","pieces_to_fen","stm_to_fen","try_from","try_into","type_id","PGNLoader","ParsedPGN","ParsedPGNMove","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","eval","fen","file_iterator","from","from","from","into","into","into","into_iter","move","new","new","new","next","parse","result","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CASTLING_HASHES","EN_PASSANT_HASHES","PIECE_HASHES","STM_HASH","generate_castling_hashes","generate_en_passant_hashes","generate_piece_hashes","generate_stm_hash","get_castling_right_hash","get_en_passant_hash","get_piece_hash","get_stm_hash","recalculate_hash","recalculate_pawn_hash","Draw","Loss","WdlDtzResult","WdlResult","Win","borrow","borrow","borrow_mut","borrow_mut","dtz","eq","fmt","from","from","get_tablebase_move","into","into","move","new","syzygy","try_from","try_from","try_into","try_into","type_id","type_id","wdl","bindings","probe","TB_BLESSED_LOSS","TB_CASTLING_K","TB_CASTLING_Q","TB_CASTLING_k","TB_CASTLING_q","TB_CURSED_WIN","TB_DRAW","TB_LARGEST","TB_LOSS","TB_MAX_CAPTURES","TB_MAX_MATE_PLY","TB_MAX_MOVES","TB_MAX_PLY","TB_PROMOTES_BISHOP","TB_PROMOTES_KNIGHT","TB_PROMOTES_NONE","TB_PROMOTES_QUEEN","TB_PROMOTES_ROOK","TB_RESULT_DTZ_MASK","TB_RESULT_DTZ_SHIFT","TB_RESULT_EP_MASK","TB_RESULT_EP_SHIFT","TB_RESULT_FAILED","TB_RESULT_FROM_MASK","TB_RESULT_FROM_SHIFT","TB_RESULT_PROMOTES_MASK","TB_RESULT_PROMOTES_SHIFT","TB_RESULT_TO_MASK","TB_RESULT_TO_SHIFT","TB_RESULT_WDL_MASK","TB_RESULT_WDL_SHIFT","TB_VALUE_DRAW","TB_VALUE_INFINITE","TB_VALUE_MATE","TB_VALUE_PAWN","TB_WIN","TbMove","TbRootMove","TbRootMoves","WCHAR_MAX","WCHAR_MIN","WINT_MAX","WINT_MIN","_CRT_PACKING","_HAS_CXX17","_HAS_CXX20","_HAS_CXX23","_HAS_EXCEPTIONS","_HAS_NODISCARD","_SAL_VERSION","_STL_LANG","_USE_ATTRIBUTES_FOR_SAL","_USE_DECLSPECS_FOR_SAL","_VCRT_COMPILER_PREPROCESSOR","__SAL_H_VERSION","__bool_true_false_are_defined","__report_gsfailure","__security_check_cookie","__security_cookie","__security_init_cookie","__va_start","__vcrt_bool","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","false_","fmt","fmt","from","from","index64","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","move_","moves","pv","pvSize","size","tbRank","tbScore","tb_free","tb_init","tb_init_impl","tb_probe_root","tb_probe_root_dtz","tb_probe_root_impl","tb_probe_root_wdl","tb_probe_wdl","tb_probe_wdl_impl","to_owned","to_owned","true_","try_from","try_from","try_into","try_into","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","va_list","wchar_t","get_max_pieces_count","get_root_wdl_dtz","get_wdl","init","benchmark","BenchmarkResult","beta_cutoffs","borrow","borrow_mut","cmtable_illegal_moves","cmtable_legal_moves","default","from","into","ktable_illegal_moves","ktable_legal_moves","leafs_count","lmp_accepted","lmp_rejected","movegen_captures_stages","movegen_counters_stages","movegen_hash_move_stages","movegen_killers_stages","movegen_quiets_stages","nmp_accepted","nmp_attempts","nmp_rejected","nodes_count","non_perfect_cutoffs","phtable_added","phtable_hits","phtable_misses","pvs_full_window_searches","pvs_rejected_searches","pvs_zero_window_searches","q_beta_cutoffs","q_futility_pruning_accepted","q_futility_pruning_rejected","q_leafs_count","q_nodes_count","q_non_perfect_cutoffs","q_perfect_cutoffs","q_score_pruning_accepted","q_score_pruning_rejected","razoring_accepted","razoring_attempts","razoring_rejected","result_hash","run","snmp_accepted","snmp_attempts","snmp_rejected","time","try_from","try_into","tt_added","tt_hits","tt_illegal_hashmoves","tt_legal_hashmoves","tt_misses","type_id","assert_fast","bitflags","bithelpers","dev","minmax","panic_fast","param","percent","rand","BitFlags","Item","bit_flags","contains","BitHelpers","Item","bit_count","bit_helpers","bit_scan","get_lsb","pop_lsb","MinMax","max","min","min_max","RandState","SEED","borrow","borrow_mut","from","i16","i32","i64","i8","into","isize","new","rand","rand_definition","seed","seed","try_from","try_into","type_id","u16","u32","u64","u8","usize"],"q":[[0,"inanis"],[12,"inanis::cache"],[18,"inanis::cache::counters"],[39,"inanis::cache::history"],[65,"inanis::cache::killers"],[88,"inanis::cache::pawns"],[129,"inanis::cache::perft"],[175,"inanis::cache::search"],[232,"inanis::cache::search::TTableScoreType"],[236,"inanis::engine"],[253,"inanis::engine::clock"],[254,"inanis::engine::context"],[321,"inanis::engine::movesort"],[322,"inanis::engine::params"],[418,"inanis::engine::qsearch"],[421,"inanis::engine::qsearch::movepick"],[422,"inanis::engine::qsearch::runner"],[425,"inanis::engine::search"],[428,"inanis::engine::search::movepick"],[485,"inanis::engine::search::runner"],[500,"inanis::engine::see"],[512,"inanis::engine::stats"],[569,"inanis::evaluation"],[601,"inanis::evaluation::material"],[613,"inanis::evaluation::mobility"],[653,"inanis::evaluation::params"],[673,"inanis::evaluation::pawns"],[693,"inanis::evaluation::pst"],[710,"inanis::evaluation::pst::bishop"],[711,"inanis::evaluation::pst::king"],[712,"inanis::evaluation::pst::knight"],[713,"inanis::evaluation::pst::pawn"],[714,"inanis::evaluation::pst::queen"],[715,"inanis::evaluation::pst::rook"],[716,"inanis::evaluation::safety"],[731,"inanis::interface"],[733,"inanis::interface::terminal"],[753,"inanis::interface::uci"],[801,"inanis::perft"],[806,"inanis::perft::context"],[834,"inanis::perft::divided"],[835,"inanis::perft::fast"],[836,"inanis::perft::normal"],[848,"inanis::state"],[1024,"inanis::state::movegen"],[1065,"inanis::state::movescan"],[1108,"inanis::state::movescan::MoveFlags"],[1128,"inanis::state::patterns"],[1145,"inanis::state::representation"],[1223,"inanis::state::representation::CastlingRights"],[1231,"inanis::state::text"],[1236,"inanis::state::text::fen"],[1266,"inanis::state::text::pgn"],[1302,"inanis::state::zobrist"],[1316,"inanis::tablebases"],[1343,"inanis::tablebases::syzygy"],[1345,"inanis::tablebases::syzygy::bindings"],[1468,"inanis::tablebases::syzygy::probe"],[1472,"inanis::testing"],[1473,"inanis::testing::benchmark"],[1529,"inanis::utils"],[1538,"inanis::utils::bitflags"],[1542,"inanis::utils::bithelpers"],[1549,"inanis::utils::minmax"],[1553,"inanis::utils::rand"],[1577,"core::result"],[1578,"core::any"],[1579,"core::option"],[1580,"alloc::vec"],[1581,"alloc::sync"],[1582,"core::sync::atomic"],[1583,"alloc::string"],[1584,"std::ffi::os_str"],[1585,"alloc::string"],[1586,"core::fmt"],[1587,"std::io::buffered::bufreader"],[1588,"std::io"],[1589,"core::ops::range"]],"d":["","","","","","","","","","","","","","","","","","","","","Adds countermove <code>r#move</code> as response to <code>previous_move</code>.","","","","","Constructs a default instance of CMTable by allocating â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Gets countermove for <code>previous_move</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Increases <code>[from][to]</code> history slot value based on <code>depth</code>.","Ages a single value by dividing value by the AGING_DIVISOR.","Ages all values in the history table by dividing them by â€¦","","","","","","Constructs a default instance of HTable by allocating â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Gets <code>[from][to]</code> history slot value, relative to <code>max</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Punishes <code>[from][to]</code> history slot value based on <code>depth</code>.","","","","","","","","","","","Adds a new killer <code>r#move</code> at the level specified by <code>ply</code> â€¦","","","","","Clears all killer moves at the level specified by <code>ply</code>.","","Constructs a default instance of KTable by allocating â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Gets all killer moves at the level specified by <code>ply</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Adds a new entry (storing the key, <code>score_opening</code> and â€¦","","","","","","","Constructs a default instance of PHTableEntry with zeroed â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry using <code>hash</code> to calculate an index. â€¦","Loads and parses atomic value into a PHTableResult struct.","Calculates an index for the <code>hash</code>.","Calculates a key for the <code>hash</code> by taking first 16 bits of â€¦","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PHTable by allocating <code>size</code> â€¦","Constructs a new instance of PHTableResult with stored <code>key</code>â€¦","","","","","Converts <code>key</code>, <code>score_opening</code> and <code>score_ending</code> into an â€¦","","","","","","","","","","","","","","","","Adds a new entry (storing <code>hash</code>, <code>depth</code> and <code>leafs_count</code>) â€¦","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry from the specified <code>depth</code> using <code>hash</code> to â€¦","Calculates an index for the <code>hash</code>.","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PerftHashTable by allocating â€¦","Constructs a new instance of PerftHashTableResult with â€¦","","","","","","","","","","","","","","","","","","","","Adds a new entry (storing the key, <code>score</code>, <code>best_move</code>, <code>depth</code>â€¦","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a wanted entry using <code>hash</code> to calculate an index of â€¦","Gets an entryâ€™s best move using <code>hash</code> to calculate an â€¦","Loads and parses atomic value into a TTableResult struct.","Calculates an index for the <code>hash</code>.","Calculates a key for the <code>hash</code> by taking first 16 bits of â€¦","Retrieves PV line from the transposition table, using <code>board</code>â€¦","Calculates an approximate percentage usage of the table, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of TTable by allocating <code>size</code> â€¦","Constructs a new instance of TTableResult with stored <code>key</code>, â€¦","Prefetches an entry using <code>hash</code> to calculate an index of â€¦","","Converts <code>key</code>, <code>score</code>, <code>best_move</code>, <code>depth</code>, <code>r#type</code> and <code>age</code> into â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if <code>score</code> is within mate range (from -CHECKMATE_SCOREâ€¦","","","","","","","Calculates time bounds (soft and hard) which should be â€¦","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Constructs a new instance of SearchContext with parameters â€¦","Constructs a new instance of SearchResult with stored <code>time</code> â€¦","Constructs a new instance of SearchResultLine with stored â€¦","Performs the next iteration of the search, using data â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a selection sort on <code>moves</code> and <code>move_scores</code> arrays â€¦","","","","","","","","","","","","","","Constructs a default instance of SearchParams with default â€¦","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assigns scores for <code>moves</code> by filling <code>move_scores</code> array with â€¦","Checks if the futility pruning can be applied for â€¦","Entry point of the quiescence search. The main idea here â€¦","Checks if the score pruning can be applied for <code>move_score</code>. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assigns capture scores for <code>moves</code> by filling <code>move_scores</code> â€¦","Assigns quiet scores for <code>moves</code> by filling <code>move_scores</code> â€¦","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a next move to analyze. This function acts as â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The main idea of the check extensions is to extend search â€¦","Gets the check extension, for now itâ€™s constant 1.","The main idea of the internal iterative reduction is that â€¦","Gets the internal iterative depth reduction, based on <code>depth</code>â€¦","The main idea of the late move pruning is to prune all â€¦","The main idea of the late move reduction is to reduce â€¦","Gets the late move depth reduction, based on <code>move_index</code>. â€¦","The main idea of the null move pruning is to prune all â€¦","Gets the null move pruning depth reduction, based on <code>depth</code>â€¦","The main idea of the razoring is to detect and prune all â€¦","Gets the razoring margin, based on <code>depth</code>. The further from â€¦","Aspiration window wrapper for the entry point of the â€¦","Entry point of the regular search, with generic <code>ROOT</code> â€¦","The main idea of the static null move pruning (also called â€¦","Gets the static null move pruning margin, based on <code>depth</code>. â€¦","","","","","","","Evaluates a static exchange evaluation result, based on â€¦","Recursive function called by <code>evaluate</code> to help evaluate a â€¦","Gets a result of the static exchange evaluation, based on â€¦","Gets a piece value based on <code>piece_index</code> saved in SEE â€¦","Converts <code>piece</code> index to SEE piece index, which supports â€¦","Initializes static exchange evaluation table.","","Implements <code>+=</code> operator for SearchStats by adding all â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements <code>+</code> operator for PackedEval.","Implements <code>+=</code> operator for PackedEval.","","","","","","","Returns the argument unchanged.","Gets ending score from the internal data.","Gets opening score from the internal data.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PackedEval with <code>opening</code> and â€¦","Constructs a new instance of PackedEval with raw <code>data</code>.","","","","","","Implements <code>-</code> operator for PackedEval.","Implements <code>-=</code> operator for PackedEval.","Blends <code>opening_score</code> and <code>ending_score</code> with the ratio â€¦","","","","","","","","","Evaluates material on the <code>board</code> and returns score from the â€¦","Returns the argument unchanged.","Gets material data for <code>board</code> and <code>color</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Evaluates mobility and part of the king safety on the <code>board</code>â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets mobility data for <code>board</code>, <code>color</code> and fills <code>aux</code> with â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluates structure of pawns on the <code>board</code> and returns â€¦","Evaluates pawn structure on the <code>board</code> for the specified â€¦","Does the same thing as evaluate, but without using pawn â€¦","Returns the argument unchanged.","Gets all pawn features on <code>board</code> for <code>color</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Evaluates piece-square table value on the <code>board</code> and â€¦","Gets a PST value for the specified <code>piece</code>, <code>pov</code>, <code>king_square</code> â€¦","","","","","Recalculates incremental counters on the <code>board</code>. This â€¦","","","","","","","","","","","","Evaluates king safety on the <code>board</code> and returns score from â€¦","Evaluates kibg safety on the <code>board</code> for the specified â€¦","Returns the argument unchanged.","Gets safety data for <code>board</code>, <code>color</code>, <code>our_aux</code> and <code>their_aux</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Handles <code>benchmark</code> command by running a fixed-depth search â€¦","Handles <code>dperft [depth]</code>, <code>dperft [depth] fen [fen]</code> and â€¦","Handles <code>evaluate [fen]</code> command by printing evaluation for â€¦","Handles <code>help</code> command by printing all available ones.","Handles <code>perft [depth]</code>, <code>perft [depth] fen [fen]</code> and â€¦","Handles <code>qperft [depth] [threads_count] [hashtable_size_mb]</code>â€¦","Handles <code>quit</code> command by exiting process.","Handles <code>uci</code> command by entering into the UCI (Universal â€¦","Handles unknown command by printing an error.","Handles <code>wah</code> command by printing WAH.                  ","Creates a new board based on the input with FEN or moves â€¦","Entry point of the terminal interface and command loop. If â€¦","","","","","","","","","","","","","","","Constructs a default instance of UciState with zeroed â€¦","","Returns the argument unchanged.","Returns the argument unchanged.","Handles <code>debug [on/off]</code> command by setting the proper flag.","Handles non-standard <code>fen</code> command by printing FEN of the â€¦","Handles <code>go [parameters]</code> command by running a new search â€¦","Handles <code>isready</code> command by printing response as fast as â€¦","Handles <code>ponderhit</code> command by setting abort and ponder â€¦","Handles <code>position ...</code> command with the following variants:","Handles <code>quit</code> command by terminating engine process.","Handles <code>setoption [name] value [value]</code> command by creating â€¦","Handles <code>stop</code> command by setting abort flag, which should â€¦","Handles <code>ucinewgame</code> command by resetting a board state, â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of UciOption with <code>order</code>, <code>r#type</code>, â€¦","Constructs a new instance of UciOption with <code>order</code> and â€¦","","","","Recreates transposition table, pawn hashtable, killers â€¦","Entry point of the UCI (Universal Chess Interface) and â€¦","","","","","","","","","","","","","","Internal perft function, common for every mode.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new instance of PerftContext with <code>board</code> as â€¦","","","","","","","","","Entry point of the fixed-<code>depth</code> divided perft, which â€¦","Entry point of the fixed-<code>depth</code> fast perft, which uses both â€¦","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Constructs a new instance of NormalPerftResult with stored â€¦","","Entry point of the fixed-<code>depth</code> simple perft. Use â€¦pplies bishop magic for the square specified by <code>square</code>, â€¦","Applies a magic number for a set of <code>permutations</code>, <code>attacks</code> â€¦","Applies rook magic for the square specified by <code>square</code>, â€¦","","","","","","","Returns the argument unchanged.","Generates a bishop magic number for the square specified â€¦","Generates a magic number for a set of <code>permutations</code> and â€¦","Generates a rook magic number for the square specified by â€¦","Helper function to get all possible to move squares, â€¦","Gets a bishop attacks for the square specified by <code>square</code>, â€¦","Gets a bishop mask for the square specified by <code>square</code>, â€¦","Gets a bishop moves for the square specified by <code>square</code>, â€¦","Gets a king moves for the square specified by <code>square</code>, â€¦","Gets a knight moves for the square specified by <code>square</code>, â€¦","Gets <code>index</code>-th permutation of the <code>mask</code>.  ","Gets a queen moves for the square specified by <code>square</code>, â€¦","Gets a rook attacks for the square specified by <code>square</code>, â€¦","Gets a rook mask for the square specified by <code>square</code>, â€¦","Gets a rook moves for the square specified by <code>square</code>, â€¦","Initialize movegen for rooks and bishops.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of MagicSquare with zeroed â€¦","","","","","","","","","","","","","Constructs a new instance of Move with zeroed values.","","","Returns the argument unchanged.","Converts long-notated move (e2e4, a1a8) in <code>text</code> into the â€¦","Converts short-notated move (e4, Rc8, Qxb6) in <code>text</code> into â€¦","Gets flags from the internal data.","Gets source square from the internal data.","Gets <code>PIECE</code> mobility (by counting all possible moves at the â€¦","Gets promotion piece based on the flags saved in the â€¦","Gets destination square from the internal data.","Calls <code>U::from(self)</code>.","Checks if the move is a capture (excluding en passant, but â€¦","Checks if the move is a short or long castling.","Checks if the move is a double push.","Checks if there is any data present or itâ€™s just a â€¦","Checks if the move is en passant.","Checks if the move is legal, using <code>board</code> as the context.","Checks if the move is a promotion (including captures).","Checks if the move is quiet (single or double pushes).","Checks if the move is a single push.","Checks if there is any data present or itâ€™s just a â€¦","Constructs a new instance of Move with stored <code>from</code>, <code>to</code> and â€¦","Constructs a new instance of Move using raw bits, which â€¦","Constructs a new instance of Move with random values, not â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Generates all possible captures for the pawns toward the â€¦","Generates all possible double pushes for the pawns at the â€¦","Generates all possible single pushes for the pawns at the â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Converts move into the long notation (e2e4, a1a8).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generates box patterns for all squares.","Generates diagonal patterns for all squares.","Generates front patterns for all squares.","Generates jump patterns for all fields.","Generates rail patterns for all squares.","Get a box pattern for the square specified by <code>square</code>.","Gets a diagonal pattern for the square specified by <code>square_</code>â€¦","Gets a file pattern for the square specified by <code>square</code>.","Get a front pattern for the square specified by <code>square</code>, â€¦","Get a jumps pattern for the square specified by <code>square</code>.","Get a rail pattern for the square specified by <code>file</code>.","Gets a rank pattern for the square specified by <code>square</code>.","","","","Adds <code>piece</code> on the <code>square</code> with the specified <code>color</code>, also â€¦","Checks if any of the square specified by <code>squares</code> list is â€¦","","","","","","","","","","","","","Runs full evaluation (material, piece-square tables, â€¦","Runs fast evaluations, considering only material, â€¦","Runs full evaluation (material, piece-square tables, â€¦","","Returns the argument unchanged.","Returns the argument unchanged.","","","Generates all possible moves (non-captures and captures) â€¦","Gets a list of enemy pieces attacking a square specified â€¦","Checks if thereâ€™s an instant move possible and returns â€¦","Generates all possible non-captures (if <code>CAPTURES</code> is false) â€¦","Gets piece on the square specified by <code>square</code>.","Gets pieceâ€™s color on the square specified by <code>square</code>. â€¦","Gets pieces count by counting set bits in occupancy.","Checks if thereâ€™s a tablebase move (only Syzygy â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if thereâ€™s fifty move rule draw at the current â€¦","Checks if thereâ€™s an insufficient material draw:","Check if the king of the <code>color</code> side is checked.","Checks if thereâ€™s repetition draw with the specified â€¦","Checks if the square specified by <code>square</code> is attacked by â€¦","Makes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Makes a null move, which is basically a switch of the â€¦","Moves <code>piece</code> from the square specified by <code>from</code> to the â€¦","Constructs a new instance of BoardState with stored â€¦","Constructs a new instance of Board. Returns Err with â€¦","Constructs a new instance of Board with position specified â€¦","Constructs a new instance of Board with initial position.","","","","","","","Restores internal board state.","","Preserves internal board state.","Recalculates boardâ€™s hashes entirely.","Recalculates incremental values entirely.","Recalculate pawn attacks for the specific <code>color</code>.","Removes <code>piece</code> on the <code>square</code> with the specified <code>color</code>, also â€¦","","","","Converts the board`s state into EPD.","Converts the boardâ€™s state into FEN.","","","","","","","","","","Undoes <code>r#move</code>, with the assumption that itâ€™s perfectly â€¦","Undoes a null move, which is basically a switch of the â€¦","","","","","","","","","","","","Converts <code>piece</code> into the corresponding character (p/P, n/N, â€¦","Converts piece <code>symbol</code> (p/P, n/N, b/B, r/R, q/Q, k/K) into â€¦","","","","Converts Board into the EPD.","Converts Board into the FEN.","","","Converts castling rights from the <code>board</code> into the FEN chunk.","","Converts en passant from the <code>board</code> into the FEN chunk.","Converts <code>epd</code> into the Board. Returns Err with proper error â€¦","Converts <code>fen</code> into the Board. Returns Err with proper error â€¦","Parses FENâ€™s castling rights and stores them into the â€¦","Parses FENâ€™s en passant and stores it into the <code>board</code>. â€¦","Parses FENâ€™s fullmove number and stores it into the <code>board</code>â€¦","Parses FENâ€™s halfmove clock and stores it into the <code>board</code>â€¦","Parses FENâ€™s pieces and stores them into the <code>board</code>. â€¦","Parses FENâ€™s active color and stores it into the <code>board</code>. â€¦","Returns the argument unchanged.","Converts fullmove number from the <code>board</code> into the FEN chunk.","Gets a value of the <code>name</code> parameters from the specified <code>epd</code>â€¦","Converts halfmove clock from the <code>board</code> into the FEN chunk.","","Calls <code>U::from(self)</code>.","Constructs a new instance of ParsedEPD with the <code>board</code> and â€¦","Converts pieces from the <code>board</code> into the FEN chunk.","Converts active color from the <code>board</code> into the FEN chunk.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new instance of PGNLoader with the specified â€¦","Constructs a new instance of ParsedPGN with stored <code>result</code>, â€¦","","Performs the next iteration by parsing the following PGN â€¦","Parses a single <code>pgn</code> and returns Some if it has been done â€¦","","","","","","","","","","","","","","","Generates a constant array of castling hashes.","Generates a constant array of en passant hashes.","Generates a constant array of piece hashes.","Generates a constant array of side to move hashes.","Gets castling right hash based on the <code>current</code> ones and the â€¦","Gets en passant hash for the <code>file</code>.","Gets <code>piece</code> hash with the <code>color</code> for the square specified by â€¦","Gets active color hash.","Recalculates boardâ€™s hash entirely.","Recalculates boardâ€™s pawn hash entirely.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Checks if thereâ€™s a tablebase move (only Syzygy â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new instance of WdlDtzResult with stored <code>wdl</code>, â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets maximal pieces count supported by loaded Syzygy â€¦","Gets WDL (Win-Draw-Loss), DTZ (Distance To Zeroing) and â€¦","Gets WDL (Win-Draw-Loss) for the position specified in â€¦","Loads Syzygy tablebases stored in <code>syzygy_path</code> location.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs a benchmark by performing a fixed-depth search for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Calls <code>U::from(self)</code>.","Gets a random number within <code>range</code>.","Constructs a new instance of RandState with stored <code>seed</code>.","https://en.wikipedia.org/wiki/Xorshift#xorshift*","","Sets an initial seed for LCG.","","","","","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>.","Gets a random number within <code>range</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,87,1,87,1,1,87,1,1,87,87,1,1,87,1,87,1,87,0,0,0,6,6,6,6,88,6,88,88,6,6,88,6,6,88,6,6,6,6,88,6,88,6,88,0,0,0,10,10,89,10,89,10,89,10,10,89,10,10,89,10,10,89,10,89,10,89,0,0,0,13,13,16,17,13,16,17,16,13,16,17,13,16,13,13,13,13,16,17,16,17,13,17,16,17,16,17,16,13,13,16,17,13,16,17,13,16,17,0,0,0,0,0,20,20,23,21,22,20,23,21,22,22,21,22,21,20,23,21,22,20,20,20,20,23,21,22,22,23,20,23,20,20,23,21,22,20,23,21,22,20,23,21,22,0,0,0,0,0,0,24,28,28,24,28,26,27,24,28,26,27,26,27,28,26,24,28,26,27,24,24,27,24,24,24,24,24,28,26,27,28,27,24,28,24,28,27,24,24,28,26,27,24,28,26,27,28,24,28,26,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,36,37,32,36,37,32,32,36,32,32,36,37,32,32,32,32,36,37,32,32,32,32,32,32,32,32,32,32,32,36,37,32,32,32,32,32,37,37,32,32,32,32,32,32,32,32,32,32,36,32,32,36,37,32,36,37,32,32,36,37,32,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,0,0,41,42,41,42,41,42,41,41,41,42,0,41,41,42,41,41,41,41,41,41,41,41,41,41,41,42,41,42,41,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,0,0,44,44,0,0,0,0,0,44,44,44,44,44,44,44,0,46,46,46,0,46,0,46,46,46,46,46,0,0,0,48,47,48,66,47,48,66,47,47,0,48,66,47,0,66,48,66,47,47,48,47,66,48,47,48,48,48,47,48,66,47,48,66,47,48,66,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,49,0,0,0,49,0,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,50,0,50,50,50,50,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,55,56,55,55,55,56,56,56,55,56,55,0,0,0,0,0,0,0,0,0,0,56,55,55,55,55,55,56,55,56,0,0,55,56,55,56,55,55,56,55,55,0,0,0,0,0,0,0,59,59,60,59,60,60,60,59,60,60,60,59,59,60,59,59,60,59,60,59,59,60,59,60,59,60,0,0,0,61,61,61,61,61,61,0,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,67,29,67,67,67,29,67,29,67,29,67,29,29,29,29,29,67,29,29,29,29,29,29,29,29,29,29,67,67,29,67,29,29,29,29,29,29,29,29,67,29,29,29,29,29,29,67,29,29,29,67,29,29,29,29,29,29,29,29,29,29,29,67,29,29,67,29,67,29,67,29,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,69,0,0,69,69,0,69,0,0,0,0,0,0,0,0,0,69,0,0,0,69,69,69,0,0,69,69,69,0,0,0,73,75,74,73,75,74,75,74,75,73,73,75,74,73,75,74,73,74,73,75,74,73,73,75,73,75,74,73,75,74,73,75,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,0,0,76,77,76,77,76,77,76,76,77,76,0,77,76,77,77,0,77,76,77,76,77,76,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,79,78,79,78,79,78,79,0,78,79,78,79,0,0,0,0,0,0,0,0,0,0,78,79,78,79,78,78,79,78,78,0,0,0,0,0,0,0,0,0,78,79,0,78,79,78,79,78,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,82,0,82,0,83,83,0,83,83,83,0,58,58,0,0,0,86,86,86,0,0,0,0,86,0,86,0,0,0,86,86,86,86,0,0,0,0,0],"f":"````````````````````{{bdd}f}{ce{}{}}000{{}b}{cc{}}0{{bd}d}33``{c{{h{e}}}{}{}}000{cj{}}0```{{lnnA`}f}{{lAb}Ab}{lf}8888`{{}l}77{{lnnA`}A`}::`4`666655```{{AdAfd}f};;;;{{AdAf}f}`{{}Ad};;{{AdAf}{{Ah{d}}}}>>`::::99```{{AjAlAnAn}f}??????{{}B`}>>>{{AjAl}{{Bd{Bb}}}}{B`Bb}{{AjAl}n}{{AjAl}Af}{{Ajn}Bf}{ce{}{}}00``{nAj}{{AfAnAn}Bb}````{{B`AfAnAn}f}`{c{{h{e}}}{}{}}00000{cj{}}00`````{{BhAlA`Al}f}66666666`{{}Bj}{{}Bl}`{cc{}}000{{BhAlA`}{{Bd{Bn}}}}{{BhAl}n}{{Bhn}Bf}<<<<``{nBh}{AlBn}`::::::::9999``````{{C`AlAndCbAfA`A`}f}``????????{{}Cd}{{}Cf}``8888{{C`AlAf}{{Bd{Ch}}}}{{C`Al}{{Bd{d}}}}{CfCh}{{C`Al}n}{{C`Al}Af}{{C`CjCb}{{Cl{d}}}}{{C`n}Bf}{ce{}{}}000``{nC`}{{AfAndCbA`A`}Ch}{{C`Al}f}`{{CfAfAndCbA`A`}f}`{c{{h{e}}}{}{}}0000000`{cj{}}000``````````````{AnCn}``````{D`{{Db{AbAb}}}}`````888888````{cc{}}00```9999`````````{{Cj{Dd{C`}}{Dd{Aj}}{Dd{Df}}{Dd{Df}}}D`}{{AbCb}Dh}{{An{Cl{d}}}Dj}{D`{{Bd{c}}}{}}``````````````````888888`777`{{DlDnnn}{{Db{dAn}}}}`````````>>{E`E`}{{ce}f{}{}}{{}E`}8````````{ce{}{}}````````````````````````````````````````````````````````````````````0==<```{{D`DlDnn}f}{{D`AnAnAn}Cn}{{D`AfAnAn}An}{{D`An}Cn}````````````````````````````{{D`Eb}f}{{D`Ebn}f}6666{{}Eb}{{EdEd}Cn}``{cc{}}0{{D`Eb}{{Bd{{Db{dAn}}}}}}`::``````````{c{{h{e}}}{}{}}000{cj{}}0{CnCn}{{}Cb}{{D`Cbd}Cn}{{D`Cb}Cb}{{D`CbnAnCn}Cn}{{D`CbnAnCnCn}Cn}{{D`n}Cb}{{D`CbAnCnCn}Cn}4{{D`CbAnCn}Cn}{{D`Cb}An}{{D`Cb}f}{{D`CbAfAnAnCnCnd}An}32``````{{nnn}Cb}{{nnnn}Cb}{{nnnn}An}{nCb}{nn}{{}f}`{{EfEf}f}`{ce{}{}}0``{{}Ef}{cc{}}2```````````````````````````````````````{c{{h{e}}}{}{}}0`````{cj{}}````{{EhEh}Eh}{{EhEh}f}66{EhEh}{{ce}f{}{}}`{{}Eh}7{EhAn}0:``{{AnAn}Eh}{EjEh}`````76{{EhA`}An}=::9``=={CjEh}<{{Cjn}El}?`<<;`````??????{{}En}{{CjEnEn}Eh}???{{CjnEn}F`}`{ce{}{}}00``````````{c{{h{e}}}{}{}}00000{cj{}}00```````````````````````22``{{CjAjEf}Eh}{{Cjn}Eh}9{cc{}}{{Cjn}Fb}6````554`````````;{{nnnn}Eh}````{Cjf}`````````88:{{CjnEnEn}Eh}4{{CjnEnEn}Fd}:```998``````````{{}f}{{{Cl{Ff}}}f}01001111{{{Fh{Ff}}}{{h{CjFj}}}}{{{Cl{Fl}}{Cl{Ff}}}f}``````>>>>{FnFn}{{ce}f{}{}}``{{}G`}`<<{{{Fh{Fj}}G`}f}{G`f}18018100{ce{}{}}0``{{AbFfccc}FnGb}{{Abc}Fn{GbGd}}```3;2{c{{h{e}}}{}{}}000`{cj{}}0`````{{GfEj}Al}```5555````{{}Gh}``{cc{}}0`77{{Cj{Dd{Bh}}CnCn}Gf}``555544{{EjCj}{{Cl{{Db{FjAl}}}}}}{{EjCjnn}{{Db{AlBf}}}}`::3:{{AlGh}Gj}`{{EjCjCn}Gj}`998```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{{Ah{Gl}}n}f}{{{Fh{Al}}{Fh{Al}}AlA`}{{Cl{Al}}}}1`>>{GlGl}{{ce}f{}{}}{{}Gl}:{nAl}{{A`{Fh{Al}}{Fh{Al}}}Al}1{{Aln{Db{GnGn}}}Al}{{Aln}Al}3033{{AlAl}Al}1141{{}f}{ce{}{}}``7`0{c{{h{e}}}{}{}}0{cj{}}``22{dd};`{{}d}{{dd}Cn}{{dH`}Hb}{cc{}}{{FfCj}{{h{dFj}}}}0{dA`}{dn}{{CjnEn}Hd}11;{dCn}0000{{dCj}Cn}1111{{nnA`}d}{Afd};{{CjDlnAl}n}0000{dFj}{ce{}{}}{cFj{}}{c{{h{e}}}{}{}}0{cj{}}`````````````````````````{{}{{Ah{Al}}}}0{{}{{Ah{{Ah{Al}}}}}}11{nAl}00{{nn}Al}111```{{Cjnnn}f}{{Cjn{Fh{n}}}Cn}9999``{CjCj}{HfHf}{{ce}f{}{}}0{{}Cj}`{{CjnAjEf}An}0{{Cjn}An}{{CjH`}Hb}{cc{}}0``{{CjDlAl}n}{{Cjnn}n}{Cj{{Bd{d}}}}{{CjDlnAl}n}{{Cjn}n}0{CjA`}{{CjAb}{{Bd{{Db{dAn}}}}}}``{ce{}{}}0{CjCn}0{{Cjn}Cn}{{CjEj}Cn}{{Cjnn}Cn}{{Cjd}f}{Cjf}{{Cjnnnn}f}{{AfA`AlAlAlA`Eh}Hf}{Ff{{h{CjFj}}}}{{{Fh{Ff}}}{{h{CjFj}}}}{{}Cj}``````5`555{{Cjn}f}{{Cjnnn}f}```{CjFj}0>>{cFj{}}{c{{h{e}}}{}{}}000{cj{}}0<;```````````{n{{h{HhFj}}}}{Hh{{h{nFj}}}}```55{ce{}{}}06`6{Ff{{h{HjFj}}}}<{{CjFf}{{h{fFj}}}}00000{cc{}}9{{Ff{Fh{Ff}}}{{Bd{Fj}}}}:`4{CjHj};;998```555555````2225555`{{{I`{{Hn{Hl}}}}}Ib}{{Fj{Bd{Fj}}{Cl{Id}}}If}{{dBf}Id}{Ib{{Bd{c}}}{}}{{IbFj}{{h{IfFj}}}}`>>>>>>===````{{}{{Ah{Al}}}}0{{}{{Ah{{Ah{{Ah{Al}}}}}}}}{{}Al}{{A`A`}Al}{nAl}{{nnn}Al}3{Cjf}0`````{ce{}{}}000`{{IhIh}Cn}{{IhH`}Hb}{cc{}}0{{CjAb}{{Bd{{Db{dAn}}}}}}44`{{IhAbd}Ij}`{c{{h{e}}}{}{}}000{cj{}}0`````````````````````````````````````````````````````````````````7777{IlIl}{InIn}{{ce}f{}{}}0`{{IlH`}Hb}{{InH`}Hb}99``````````<<````````````````<<`666655```````````{{}A`}{Cj{{Bd{Ij}}}}{Cj{{Bd{Ih}}}}{Fff}```{ce{}{}}0``{{}J`}?1``````````````````````````````````0````<<`````;````````````{{{Jd{}{{Jb{c}}}}c}Cn{}}``{{{Jf{}{{Jb{c}}}}}n{}}`0{{{Jf{}{{Jb{c}}}}}c{}}0`{{}Gd}0```55{cc{}}{cAn{{Jh{An}}}}{cEj{{Jh{Ej}}}}{cJj{{Jh{Jj}}}}{cCb{{Jh{Cb}}}}:{cGn{{Jh{Gn}}}}{AlJl}{Al{{Db{AlAl}}}}`{Alf}`{c{{h{e}}}{}{}}0{cj{}}{cAf{{Jh{Af}}}}{cAb{{Jh{Ab}}}}{cAl{{Jh{Al}}}}{cA`{{Jh{A`}}}}{cn{{Jh{n}}}}","c":[],"p":[[5,"CMTable",18],[5,"Move",1065],[1,"unit"],[6,"Result",1577],[5,"TypeId",1578],[5,"HTable",39],[1,"usize"],[1,"u8"],[1,"u32"],[5,"KTable",65],[1,"u16"],[1,"array"],[5,"PHTable",88],[1,"u64"],[1,"i16"],[5,"PHTableEntry",88],[5,"PHTableResult",88],[6,"Option",1579],[1,"f32"],[5,"PerftHashTable",129],[5,"PerftHashTableBucket",129],[5,"PerftHashTableEntry",129],[5,"PerftHashTableResult",129],[5,"TTable",175],[1,"i8"],[5,"TTableBucket",175],[5,"TTableEntry",175],[5,"TTableResult",175],[5,"Board",1145],[5,"Vec",1580],[1,"bool"],[5,"SearchContext",254],[1,"tuple"],[5,"Arc",1581],[5,"AtomicBool",1582],[5,"SearchResult",254],[5,"SearchResultLine",254],[8,"Moves",0],[8,"MoveScores",0],[5,"SearchParams",322],[5,"MoveGenState",428],[6,"MoveGenStage",428],[5,"SearchStats",512],[5,"PackedEval",569],[1,"i32"],[5,"MaterialData",601],[5,"EvalAux",613],[5,"MobilityData",613],[5,"PawnsData",673],[5,"SafetyData",716],[1,"str"],[1,"slice"],[5,"String",1583],[5,"OsString",1584],[5,"UciOption",753],[5,"UciState",753],[10,"ToString",1583],[10,"MinMax",1549],[5,"PerftContext",806],[5,"PerftStats",806],[5,"NormalPerftResult",836],[5,"MagicSquare",1024],[1,"isize"],[5,"Formatter",1585],[8,"Result",1585],[5,"PieceMobility",613],[5,"BoardState",1145],[1,"char"],[5,"ParsedEPD",1236],[5,"File",1586],[5,"BufReader",1587],[5,"Lines",1588],[5,"PGNLoader",1266],[5,"ParsedPGNMove",1266],[5,"ParsedPGN",1266],[6,"WdlResult",1316],[5,"WdlDtzResult",1316],[5,"TbRootMove",1345],[5,"TbRootMoves",1345],[5,"BenchmarkResult",1473],[17,"Item"],[10,"BitFlags",1538],[10,"BitHelpers",1542],[10,"RangeBounds",1589],[1,"i64"],[5,"RandState",1553],[5,"CMTableEntry",18],[5,"HTableEntry",39],[5,"KTableEntry",65]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
